{
  "swagger" : "2.0",
  "info" : {
    "version" : "1.3",
    "title" : "check_service.proto"
  },
  "consumes" : [ "application/json" ],
  "produces" : [ "application/json" ],
  "paths" : {
    "/v1/check" : {
      "post" : {
        "tags" : [ "CheckService" ],
        "summary" : "Create a new check.\nAuthorization scope of `fm.check.create` is required.",
        "operationId" : "CheckService_Create",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCreateCheckRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmCreateCheckResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/check/checkinout" : {
      "post" : {
        "tags" : [ "CheckService" ],
        "summary" : "Check can be used to check in a staff to a opening_check and check out to a\nclosing check Authorization scope of `fm.check.in` and `fm.check.out` is\nrequired.",
        "operationId" : "CheckService_CheckInOut",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCheckInOutRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : { }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/checks" : {
      "get" : {
        "tags" : [ "CheckService" ],
        "summary" : "List returns the list of check visible to the authroized user in descending\ndate order. Authorization scope of `fm.check.list` is required.",
        "operationId" : "CheckService_List",
        "parameters" : [ {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "organization_id",
          "in" : "query",
          "description" : "filter for selected organization check request.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListCheckResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/client" : {
      "post" : {
        "tags" : [ "ClientService" ],
        "summary" : "Create a new client.\nAuthorization scope of `fm.client.create` is required.",
        "operationId" : "ClientService_Create",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCreateClientRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmCreateClientResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "ClientService" ],
        "summary" : "Update an existing client.\nAuthorization scope of `fm.client.update` is required.",
        "operationId" : "ClientService_Update",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmUpdateClientRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmUpdateClientResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/client-employee" : {
      "post" : {
        "tags" : [ "ClientEmployeeService" ],
        "summary" : "Create a new client employee relation(many to many). this helps to assign\nemployee to the client.\nAuthorization scope of `fm.client-employee.create` is required.",
        "operationId" : "ClientEmployeeService_Create",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCreateClientEmployeeRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmCreateClientEmployeeResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/client-employee/contracted-hours" : {
      "get" : {
        "tags" : [ "ClientEmployeeService" ],
        "summary" : "Get contracted hours of the employee for the client\nAuthorization scope of `fm.client-employee.get-contracted-hours` is\nrequired.",
        "operationId" : "ClientEmployeeService_GetContractedHours",
        "parameters" : [ {
          "name" : "client_employee_id",
          "in" : "query",
          "description" : "unique id of client employee relation.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "organization_id",
          "in" : "query",
          "description" : "organization id of the client employee relation.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmGetContractedHoursResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ClientEmployeeService" ],
        "summary" : "Assign contracted hours to the employee for the client\nAuthorization scope of `fm.client-employee.assign-contracted-hours` is\nrequired.",
        "operationId" : "ClientEmployeeService_AssignContractedHours",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmAssignContractedHoursRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmAssignContractedHoursResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/client-employee/feedback" : {
      "get" : {
        "tags" : [ "ClientEmployeeService" ],
        "summary" : "List feedbacks.\nAuthorization scope of `fm.client-employee.feedback.list` is required.",
        "operationId" : "ClientEmployeeService_ListFeedback",
        "parameters" : [ {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "organization_id",
          "in" : "query",
          "description" : "organization id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "client_id",
          "in" : "query",
          "description" : "unique id of client who is providing feedback.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "employee_id",
          "in" : "query",
          "description" : "unique id of employee.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListFeedbackResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ClientEmployeeService" ],
        "summary" : "Create a new feedback.\nAuthorization scope of `fm.client-employee.feedback.create` is required.",
        "operationId" : "ClientEmployeeService_CreateFeedback",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCreateFeedbackRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmCreateFeedbackResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/client-employee/get-client-ids-by-employee/{employee_id}" : {
      "get" : {
        "tags" : [ "ClientEmployeeService" ],
        "summary" : "Get client_ids by employee_id\nAuthorization scope of `fm.client-employee.get-client-ids-by-employee-id`\nis required.",
        "operationId" : "ClientEmployeeService_GetClientIdsByEmployeeId",
        "parameters" : [ {
          "name" : "employee_id",
          "in" : "path",
          "description" : "Employee id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmGetClientIdsByEmployeeResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/client-employee/get-ids-by-employee/{employee_id}" : {
      "get" : {
        "tags" : [ "ClientEmployeeService" ],
        "summary" : "Get client_employee_ids by employee_id\nAuthorization scope of\n`fm.client-employee.get-client-employee-ids-by-employee-id` is required.",
        "operationId" : "ClientEmployeeService_GetClientEmployeeIdsByEmployeeId",
        "parameters" : [ {
          "name" : "employee_id",
          "in" : "path",
          "description" : "Employee id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmGetClientEmployeeIdsByEmployeeResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/client-employee/shift" : {
      "put" : {
        "tags" : [ "ClientEmployeeService" ],
        "summary" : "Assign shift to the employee for the client\nAuthorization scope of `fm.client-employee.assign-shift` is required.",
        "operationId" : "ClientEmployeeService_AssignShift",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmAssignClientEmployeeShiftRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmAssignClientEmployeeShiftResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/client-employee/target-tasks" : {
      "put" : {
        "tags" : [ "ClientEmployeeService" ],
        "summary" : "Assign target tasks for each day of the week in a fixed interval of time\nfor an employee for a client\nAuthorization scope of `fm.client-employee.assign-target-tasks` is\nrequired.",
        "operationId" : "ClientEmployeeService_AssignTargetTasks",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmAssignTargetTasksRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmAssignTargetTasksResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/client-employee/target-tasks/{client_employee_id}" : {
      "get" : {
        "tags" : [ "ClientEmployeeService" ],
        "summary" : "Get the assigned target tasks of an employee for a client\nAuthorization scope of `fm.client-employee.get-target-tasks` is required.",
        "operationId" : "ClientEmployeeService_GetTargetTasks",
        "parameters" : [ {
          "name" : "client_employee_id",
          "in" : "path",
          "description" : "unique identifier for the client employee relation",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmGetTargetTasksResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/client-employee/training" : {
      "get" : {
        "tags" : [ "ClientEmployeeService" ],
        "summary" : "Get employee trainings\nAuthorization scope of `fm.client-employee.get-employee-trainings` is\nrequired.",
        "operationId" : "ClientEmployeeService_GetEmployeeTraining",
        "parameters" : [ {
          "name" : "client_id",
          "in" : "query",
          "description" : "Unique id of client with the training.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "organization_id",
          "in" : "query",
          "description" : "organization id of the employee working for client.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "trainee_id",
          "in" : "query",
          "description" : "Unique id of trainee employee.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmGetEmployeeTrainingResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ClientEmployeeService" ],
        "summary" : "Create training for employee of client\nAuthorization scope of `fm.client-employee.create-employee-training` is\nrequired",
        "operationId" : "ClientEmployeeService_CreateEmployeeTraining",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCreateEmployeeTrainingRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmCreateEmployeeTrainingResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/client-employee/transfer" : {
      "post" : {
        "tags" : [ "ClientEmployeeService" ],
        "summary" : "Create a new transfer.\nAuthorization scope of `fm.client-employee.transfer.create` is required.",
        "operationId" : "ClientEmployeeService_CreateTransfer",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCreateTransferRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmCreateTransferResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/client-employee/transfers" : {
      "get" : {
        "tags" : [ "ClientEmployeeService" ],
        "summary" : "List transfers.\nAuthorization scope of `fm.client-employee.transfer.list` is required.",
        "operationId" : "ClientEmployeeService_ListTransfer",
        "parameters" : [ {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "employee_id",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "client_id",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "organization_id",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListTransferResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/client-employees" : {
      "get" : {
        "tags" : [ "ClientEmployeeService" ],
        "summary" : "List the employees assigned in the clients\nAuthorization scope of `fm.client-employee.list` is required.",
        "operationId" : "ClientEmployeeService_List",
        "parameters" : [ {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "organization_id",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListClientEmployeeResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/client/change-status" : {
      "patch" : {
        "tags" : [ "ClientService" ],
        "summary" : "Change status of a client.\nScope of `fm.client.status-change` is required.",
        "operationId" : "ClientService_ChangeStatus",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmClientChangeStatusRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmClientChangeStatusResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/client/{client_id}" : {
      "get" : {
        "tags" : [ "ClientService" ],
        "summary" : "Details of client.\nScope of `fm.client.detail` is required.",
        "operationId" : "ClientService_Detail",
        "parameters" : [ {
          "name" : "client_id",
          "in" : "path",
          "description" : "Client Id of the client",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmClientDetailResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/client/{client_id}/attachment" : {
      "get" : {
        "tags" : [ "ClientService" ],
        "summary" : "Lists attachment for a client.\nScope of `fm.client.list-attachment` is required.",
        "operationId" : "ClientService_ListAttachment",
        "parameters" : [ {
          "name" : "client_id",
          "in" : "path",
          "description" : "unique identifier of the client",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "attachment_type",
          "in" : "query",
          "description" : "type of attachment to list.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmClientListAttachmentResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ClientService" ],
        "summary" : "Adds attachment for a client.\nScope of `fm.client.add-attachment` is required.",
        "operationId" : "ClientService_AddAttachment",
        "parameters" : [ {
          "name" : "client_id",
          "in" : "path",
          "description" : "unique identifier of the client",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmClientAddAttachmentRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmClientAddAttachmentResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/client/{client_id}/mobilization" : {
      "get" : {
        "tags" : [ "ClientService" ],
        "summary" : "List client mobilization\nAuthorization scope of `fm.client.get-client-mobilization` is required",
        "operationId" : "ClientService_ListClientMobilization",
        "parameters" : [ {
          "name" : "client_id",
          "in" : "path",
          "description" : "client id of the requested mobilization",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListClientMobilizationResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ClientService" ],
        "summary" : "Create a new client mobilization\nAuthorization scope of `fm.client.create-client-mobilization` is required",
        "operationId" : "ClientService_CreateClientMobilization",
        "parameters" : [ {
          "name" : "client_id",
          "in" : "path",
          "description" : "client id for the mobilization",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCreateClientMobilizationRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmCreateClientMobilizationResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "ClientService" ],
        "summary" : "Update client mobilization\nAuthorization scope of `fm.client.update-client-mobilization` is required",
        "operationId" : "ClientService_UpdateClientMobilization",
        "parameters" : [ {
          "name" : "client_id",
          "in" : "path",
          "description" : "client id for the mobilization",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmUpdateClientMobilizationRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmUpdateClientMobilizationResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/clients" : {
      "get" : {
        "tags" : [ "ClientService" ],
        "summary" : "List returns the list of client visible to the authorized user in\ndescending order. Scope of `fm.client.list` is required.",
        "operationId" : "ClientService_List",
        "parameters" : [ {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "organization_id",
          "in" : "query",
          "description" : "fetch clients for this organization_id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "client_ids",
          "in" : "query",
          "description" : "list of client ids to fetch by.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "status to fetch clients by.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "search.name",
          "in" : "query",
          "description" : "name of client.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "search.client_code",
          "in" : "query",
          "description" : "unique client code.",
          "required" : false,
          "type" : "string",
          "format" : "int64"
        }, {
          "name" : "search.area",
          "in" : "query",
          "description" : "area of client.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "search.region",
          "in" : "query",
          "description" : "region of client.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListClientResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/department" : {
      "post" : {
        "tags" : [ "DepartmentService" ],
        "summary" : "Create a new department. Authorization scope of `fm.department.create` is\nrequired",
        "operationId" : "DepartmentService_Create",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCreateDepartmentRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmCreateDepartmentResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/departments" : {
      "get" : {
        "tags" : [ "DepartmentService" ],
        "summary" : "List returns the list of department visible to the authroized user in\nascending order of department title",
        "operationId" : "DepartmentService_List",
        "parameters" : [ {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "organization_id",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListDepartmentResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/designation" : {
      "post" : {
        "tags" : [ "DesignationService" ],
        "summary" : "required",
        "operationId" : "DesignationService_Create",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCreateDesignationRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmCreateDesignationResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/designations" : {
      "get" : {
        "tags" : [ "DesignationService" ],
        "summary" : "List returns the list of designation visible to the authroized user in\ndescending",
        "operationId" : "DesignationService_List",
        "parameters" : [ {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "organization_id",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListDesignationResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/employee" : {
      "post" : {
        "tags" : [ "EmployeeService" ],
        "summary" : "Create a new employee.\nAuthorization scope of `fm.employee.create` is required.",
        "operationId" : "EmployeeService_Create",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCreateEmployeeRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmCreateEmployeeResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "EmployeeService" ],
        "summary" : "Update an existing employee.\nAuthorization scope of `fm.employee.update` is required.",
        "operationId" : "EmployeeService_Update",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmUpdateEmployeeRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmUpdateEmployeeResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/employee/status" : {
      "post" : {
        "tags" : [ "EmployeeService" ],
        "summary" : "Update an employee status\nAuthorization scope of `fm.employee.update-status` is required.",
        "operationId" : "EmployeeService_UpdateStatus",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmUpdateEmployeeStatusRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmUpdateEmployeeStatusResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/employee/{employee_id}" : {
      "get" : {
        "tags" : [ "EmployeeService" ],
        "summary" : "Details of employee.\nScope of `fm.employee.detail` is required.",
        "operationId" : "EmployeeService_Detail",
        "parameters" : [ {
          "name" : "employee_id",
          "in" : "path",
          "description" : "employee Id of the employee",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmEmployeeDetailResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/employee/{employee_id}/attachment" : {
      "get" : {
        "tags" : [ "EmployeeService" ],
        "summary" : "Lists attachment for an employee.\nScope of `fm.employee.list-attachment` is required.",
        "operationId" : "EmployeeService_ListAttachment",
        "parameters" : [ {
          "name" : "employee_id",
          "in" : "path",
          "description" : "unique identifier of the employee",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "attachment_type",
          "in" : "query",
          "description" : "type of attachment to list.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmEmployeeListAttachmentResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "EmployeeService" ],
        "summary" : "Adds attachment for an employee.\nScope of `fm.employee.add-attachment` is required.",
        "operationId" : "EmployeeService_AddAttachment",
        "parameters" : [ {
          "name" : "employee_id",
          "in" : "path",
          "description" : "unique identifier of the employee",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmEmployeeAddAttachmentRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmEmployeeAddAttachmentResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "EmployeeService" ],
        "summary" : "Soft deletes an attachment for an employee.\nScope of `fm.employee.delete-attachment` is required.",
        "operationId" : "EmployeeService_DeleteAttachment",
        "parameters" : [ {
          "name" : "employee_id",
          "in" : "path",
          "description" : "unique identifier for an employee",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmEmployeeDeleteAttachmentRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmEmployeeDeleteAttachmentResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/employees" : {
      "get" : {
        "tags" : [ "EmployeeService" ],
        "summary" : "List returns the list of employee visible to the authroized user in\ndescending order. Authorization scope of `fm.employee.list` is required.",
        "operationId" : "EmployeeService_List",
        "parameters" : [ {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "organization_id",
          "in" : "query",
          "description" : "fetch employees this organization_id belongs to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "fetch employees of this status.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "search.name",
          "in" : "query",
          "description" : "name of client.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "search.employee_code",
          "in" : "query",
          "description" : "unique client code.",
          "required" : false,
          "type" : "string",
          "format" : "int64"
        }, {
          "name" : "search.area",
          "in" : "query",
          "description" : "area of client.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "search.region",
          "in" : "query",
          "description" : "region of client.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListEmployeeResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/employees/covers" : {
      "get" : {
        "tags" : [ "EmployeeCoverService" ],
        "operationId" : "EmployeeCoverService_ListEmployeeCover",
        "parameters" : [ {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "organization_id",
          "in" : "query",
          "description" : "fetch employees this organization_id belongs to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "employee_d",
          "in" : "query",
          "description" : "fetch cover for employee id.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListCoverResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/employees/holidays" : {
      "get" : {
        "tags" : [ "EmployeeHolidayService" ],
        "summary" : "List returns the list of employee holidays visible to the authroized user\nin descending order or created date. Authorization scope of\n`fm.employee.holiday.list` is required.",
        "operationId" : "EmployeeHolidayService_List",
        "parameters" : [ {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "organization_id",
          "in" : "query",
          "description" : "fetch employees this organization_id belongs to.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListHolidayResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "EmployeeHolidayService" ],
        "summary" : "Creates holiday for an employee.\nAuthentication scope of `fm.employee.holiday.create` is required.",
        "operationId" : "EmployeeHolidayService_Create",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCreateHolidayRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmCreateHolidayResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/employees/leavers" : {
      "get" : {
        "tags" : [ "EmployeeLeaverService" ],
        "summary" : "List employees that are leaving or left\nAuthentication scope of `fm.employee.leaver.list` is required",
        "operationId" : "EmployeeLeaverService_ListEmployeeLeaver",
        "parameters" : [ {
          "name" : "client_id",
          "in" : "query",
          "description" : "fetch leaver employees this client_id belongs to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "employee_id",
          "in" : "query",
          "description" : "unique id of employee.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "organization_id",
          "in" : "query",
          "description" : "fetch leaver employees this organization_id belongs to.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListEmployeeLeaverResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/employees/sick" : {
      "post" : {
        "tags" : [ "EmployeeSickService" ],
        "summary" : "Create employee sick\nAuthentication scope of `fm.employee.sick.create` is required",
        "operationId" : "EmployeeSickService_CreateEmployeeSick",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCreateEmployeeSickRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmCreateEmployeeSickResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "EmployeeSickService" ],
        "summary" : "update employee sick\nAuthentication scope of `fm.employee.sick.update` is required",
        "operationId" : "EmployeeSickService_UpdateEmployeeSick",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmUpdateEmployeeSickRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmUpdateEmployeeSickResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/employees/sicks" : {
      "get" : {
        "tags" : [ "EmployeeSickService" ],
        "summary" : "list employee sick\nAuthentication scope of `fm.employee.sick.list` is required",
        "operationId" : "EmployeeSickService_ListEmployeeSick",
        "parameters" : [ {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "client_id",
          "in" : "query",
          "description" : "fetch employees this client_id belongs to.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "organization_id",
          "in" : "query",
          "description" : "fetch employees this organization_id belongs to.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListEmployeeSickResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/inventory" : {
      "get" : {
        "tags" : [ "InventoryService" ],
        "summary" : "Returns the list of inventory items in ascending order of name.\nAuthorization scope of `fm.inventory.list` is required.",
        "operationId" : "InventoryService_ListInventoryItem",
        "parameters" : [ {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "organization_id",
          "in" : "query",
          "description" : "filter for selected organization check request.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "inventory_item_ids",
          "in" : "query",
          "description" : "list of item ids to fetch by.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListInventoryItemResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "InventoryService" ],
        "summary" : "Create a new inventory item.\nAuthorization scope of `fm.inventory.create` is required.",
        "operationId" : "InventoryService_CreateInventoryItem",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCreateInventoryItemRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmCreateInventoryItemResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/inventory/category" : {
      "get" : {
        "tags" : [ "InventoryService" ],
        "summary" : "Returns the list of inventory item categories in ascending order of name.\nAuthorization scope of `fm.inventory.category.list` is required.",
        "operationId" : "InventoryService_ListInventoryCategory",
        "parameters" : [ {
          "name" : "organization_id",
          "in" : "query",
          "description" : "Organization id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "inventory_category_ids",
          "in" : "query",
          "description" : "list of inventory category ids to fetch by.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListInventoryCategoryResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "InventoryService" ],
        "summary" : "Create a new inventory category.\nAuthorization scope of `fm.inventory.category.create` is required.",
        "operationId" : "InventoryService_CreateInventoryCategory",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCreateInventoryCategoryRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmCreateInventoryCategoryResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/job-type" : {
      "post" : {
        "tags" : [ "JobTypeService" ],
        "summary" : "Create a new job type. Authorization scope of `fm.job-type.create` is\nrequired",
        "operationId" : "JobTypeService_Create",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCreateJobTypeRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmCreateJobTypeResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/job-types" : {
      "get" : {
        "tags" : [ "JobTypeService" ],
        "summary" : "List returns the list of job type visible to the authorized user in\nascending order of job type title",
        "operationId" : "JobTypeService_List",
        "parameters" : [ {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "organization_id",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListJobTypeResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/login" : {
      "post" : {
        "tags" : [ "JWTTokenService" ],
        "summary" : "authenticates user and returns tokens",
        "operationId" : "JWTTokenService_Login",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmLoginRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmLoginResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/logout" : {
      "post" : {
        "tags" : [ "JWTTokenService" ],
        "summary" : "logout the user and invalidate refresh token",
        "operationId" : "JWTTokenService_Logout",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmLogoutRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmLogoutResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/meeting" : {
      "get" : {
        "tags" : [ "MeetingService" ],
        "summary" : "List returns the list of meeting visible to the authorized user in\ndescending order. Scope of `fm.meeting.list` is required.",
        "operationId" : "MeetingService_List",
        "parameters" : [ {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "organization_id",
          "in" : "query",
          "description" : "fetch meetings for this organization_id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "meeting_ids",
          "in" : "query",
          "description" : "list of meeting ids to fetch by.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "filter option of status (inprogress, cancel, completed).",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "start_date",
          "in" : "query",
          "description" : "start date to filter meeting by.",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "end date to filter meeting by.",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListMeetingResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "MeetingService" ],
        "summary" : "Create a new meeting.\nAuthorization scope of `fm.meeting.create` is required.",
        "operationId" : "MeetingService_Create",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCreateMeetingRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmCreateMeetingResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/note" : {
      "post" : {
        "tags" : [ "NoteService" ],
        "summary" : "Create a new note.\nAuthorization scope of `fm.note.create` is required.",
        "operationId" : "NoteService_Create",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCreateNoteRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmCreateNoteResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "NoteService" ],
        "summary" : "Update an existing note.\nAuthorization scope of `fm.note.update` is required.",
        "operationId" : "NoteService_Update",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmUpdateNoteRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmUpdateNoteResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/notes" : {
      "get" : {
        "tags" : [ "NoteService" ],
        "summary" : "Returns list of notes.\nAuthorization scope of `fm.note.list` is required.",
        "operationId" : "NoteService_List",
        "parameters" : [ {
          "name" : "created_by",
          "in" : "query",
          "description" : "id of the note creator.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "for",
          "in" : "query",
          "description" : "id for whom notes are created.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "organization_id",
          "in" : "query",
          "description" : "unique id of the organization.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListNotesResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/organization" : {
      "post" : {
        "tags" : [ "OrganizationService" ],
        "summary" : "Create a new organization.",
        "operationId" : "OrganizationService_Create",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCreateOrganizationRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmCreateOrganizationResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/organizations" : {
      "get" : {
        "tags" : [ "OrganizationService" ],
        "summary" : "List returns the list of organization visible to the authroized user in\ndescending order.",
        "operationId" : "OrganizationService_List",
        "parameters" : [ {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListOrganizationResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/refresh" : {
      "post" : {
        "tags" : [ "JWTTokenService" ],
        "summary" : "refresh an existing token and return new tokens",
        "operationId" : "JWTTokenService_Refresh",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmRefreshRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmLoginResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/task" : {
      "post" : {
        "tags" : [ "TaskService" ],
        "summary" : "Create a new task.\nAuthorization scope of `fm.task.create` is required.",
        "operationId" : "TaskService_Create",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCreateTaskRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmCreateTaskResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "TaskService" ],
        "summary" : "Update an existing task.\nAuthorization scope of `fm.task.update` is required.",
        "operationId" : "TaskService_Update",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmUpdateTaskRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmUpdateTaskResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/task/checkin" : {
      "post" : {
        "tags" : [ "TaskService" ],
        "summary" : "Checkin can be used to check in a staff to a task.\nAuthorization scope of `fm.task.checkin` is required.",
        "operationId" : "TaskService_Checkin",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCheckinTaskRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : { }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/task/checkout" : {
      "post" : {
        "tags" : [ "TaskService" ],
        "summary" : "Checkout can be used to check-out a staff from an existing checked-in task.\nAuthorization scope of `fm.task.checkout` is required.",
        "operationId" : "TaskService_Checkout",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCheckoutTaskRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : { }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/task/update-by-client" : {
      "put" : {
        "tags" : [ "TaskService" ],
        "summary" : "Update an existing task by client_id\nAuthorization scope of `fm.task.update-by-client` is required.",
        "operationId" : "TaskService_UpdateByClient",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmUpdateTaskByClientRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmUpdateTaskByClientResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/task/update-by-employee" : {
      "put" : {
        "tags" : [ "TaskService" ],
        "summary" : "Update an existing task by employee_id\nAuthorization scope of `fm.task.update-by-client` is required.",
        "operationId" : "TaskService_UpdateByEmployee",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmUpdateTaskByEmployeeRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmUpdateTaskByEmployeeResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/tasks" : {
      "get" : {
        "tags" : [ "TaskService" ],
        "summary" : "List returns the list of all tasks visible to the authroized user in\ndescending date order. Authorization scope of `fm.task.list` is required.",
        "operationId" : "TaskService_List",
        "parameters" : [ {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "organization_id",
          "in" : "query",
          "description" : "organization of employee the task is assigned to.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListTaskResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/tasks/change-timesheet-correction-status" : {
      "patch" : {
        "tags" : [ "TaskService" ],
        "summary" : "Change timesheet correction request status",
        "operationId" : "TaskService_ChangeTimesheetCorrectionStatus",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmChangeTimesheetCorrectionStatusRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmChangeTimesheetCorrectionStatusResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/tasks/issue" : {
      "post" : {
        "tags" : [ "IssueService" ],
        "summary" : "Create a new issue.\nAuthorization scope of `fm.issue.create` is required.",
        "operationId" : "IssueService_CreateIssue",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCreateIssueRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmCreateIssueResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "IssueService" ],
        "summary" : "Update an existing issue.\nAuthorization scope of `fm.issue.update` is required.",
        "operationId" : "IssueService_UpdateIssue",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmUpdateIssueRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmUpdateIssueResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/tasks/issues" : {
      "get" : {
        "tags" : [ "IssueService" ],
        "summary" : "List returns the list of all issues visible to the authroized user in\ndescending date order. Authorization scope of `fm.issue.list` is required.",
        "operationId" : "IssueService_ListIssues",
        "parameters" : [ {
          "name" : "raised_by",
          "in" : "query",
          "description" : "id of the user raising the issue.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "assigned_to",
          "in" : "query",
          "description" : "id of the user responsible for solving the issue.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "status of the issue.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "organization_id",
          "in" : "query",
          "description" : "unique id of the organization.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListIssuesResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/tasks/list-by-client" : {
      "get" : {
        "tags" : [ "TaskService" ],
        "summary" : "List returns the list of task by client visible to the authroized user in\ndescending date order. Authorization scope of `fm.task.list-by-client` is\nrequired.",
        "operationId" : "TaskService_ListByClient",
        "parameters" : [ {
          "name" : "start_date",
          "in" : "query",
          "description" : "the client timesheet report starts from this date.",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "the client timesheet report  upto this date.",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        }, {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "client_id",
          "in" : "query",
          "description" : "fetch timesheet for this client_id.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListTaskByClientResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/tasks/list-by-employee" : {
      "get" : {
        "tags" : [ "TaskService" ],
        "summary" : "List returns the list of task by employee visible to the authroized user in\ndescending date order.\nAuthorization scope of `fm.task.list-by-employee` is required.",
        "operationId" : "TaskService_ListByEmployee",
        "parameters" : [ {
          "name" : "start_date",
          "in" : "query",
          "description" : "the client timesheet report starts from this date.",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "the client timesheet report  upto this date.",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        }, {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "employee_id",
          "in" : "query",
          "description" : "fetch timesheet for this employee_id.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListTaskByEmployeeResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/tasks/list-by-mobile-employees" : {
      "get" : {
        "tags" : [ "TaskService" ],
        "summary" : "List returns the list of task by mobile employees visible to the authroized\nuser in descending date order.\nAuthorization scope of `fm.task.list-by-mobile-employees` is required.",
        "operationId" : "TaskService_ListByMobileEmployees",
        "parameters" : [ {
          "name" : "start_date",
          "in" : "query",
          "description" : "the client timesheet report starts from this date.",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "the client timesheet report  upto this date.",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        }, {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "organization_id",
          "in" : "query",
          "description" : "fetch mobile employee timesheet for this organization_id.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListTaskByMobileEmployeesResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/tasks/list-by-variation-clients" : {
      "get" : {
        "tags" : [ "TaskService" ],
        "summary" : "List returns the list of task by variation clients visible to the\nauthroized user in descending date order. Authorization scope of\n`fm.task.list-by-variation-clients` is required.",
        "operationId" : "TaskService_ListByVariationClients",
        "parameters" : [ {
          "name" : "start_date",
          "in" : "query",
          "description" : "the client timesheet report starts from this date.",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "the client timesheet report  upto this date.",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        }, {
          "name" : "filter.limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "filter.page",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "organization_id",
          "in" : "query",
          "description" : "fetch mobile employee timesheet for this organization_id.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmListTaskByVariationClientsResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/user" : {
      "post" : {
        "tags" : [ "UserService" ],
        "summary" : "Create a new user.\nAuthorization scope of `fm.user.create` is required.",
        "operationId" : "UserService_Create",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmCreateUserRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmCreateUserResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/user/associate" : {
      "post" : {
        "tags" : [ "UserService" ],
        "summary" : "associates login with an employee record.\nAuthorization scope of `fm.user.associate` is required.",
        "operationId" : "UserService_AssociateWithEmployee",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmAssociateWithEmployeeRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : { }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "UserService" ],
        "summary" : "update scopes of user\nAuthorization scope of `` is required.",
        "operationId" : "UserService_UpdateEmployeeScope",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmUpdateEmployeeScopeRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : { }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/user/role" : {
      "post" : {
        "tags" : [ "UserService" ],
        "summary" : "insert or update role scopes.\nAuthorization scope of `fm.role.create` and \"fm.role.update\" is required.",
        "operationId" : "UserService_UpsertRole",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmUpsertRoleRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : { }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/user/roles" : {
      "get" : {
        "tags" : [ "UserService" ],
        "summary" : "get roles\nAuthorization scope of `` is required.",
        "operationId" : "UserService_GetAvailableRoles",
        "parameters" : [ {
          "name" : "organization_id",
          "in" : "query",
          "description" : "id of organization.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmRoleResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/user/scopes" : {
      "get" : {
        "tags" : [ "UserService" ],
        "summary" : "get all scopes\nAuthorization scope of `` is required",
        "operationId" : "UserService_GetAvailableScopes",
        "parameters" : [ {
          "name" : "organization_id",
          "in" : "query",
          "description" : "id of organization.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmScopeResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "UserService" ],
        "summary" : "Insert or update a scope group.\nAuthorization scope of `` is required.",
        "operationId" : "UserService_UpsertScope",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/fmUpsertScopeRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : { }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    },
    "/v1/users" : {
      "get" : {
        "tags" : [ "UserService" ],
        "summary" : "get user list for changing roles/scopes\nAuthorization scope of `` is required",
        "operationId" : "UserService_GetUserList",
        "parameters" : [ {
          "name" : "organization_id",
          "in" : "query",
          "description" : "id of organization.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "schema" : {
              "$ref" : "#/definitions/fmGetUserListResponse"
            }
          },
          "default" : {
            "description" : "An unexpected error response.",
            "schema" : {
              "$ref" : "#/definitions/runtimeError"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "ClientListAttachmentResponseClientAttachmentPayload" : {
      "type" : "object",
      "properties" : {
        "attachment_id" : {
          "type" : "string",
          "title" : "unique identifier of the newly created attachment record"
        },
        "attachment_path" : {
          "type" : "string",
          "title" : "attachment path"
        },
        "attachment_type" : {
          "type" : "string",
          "title" : "attachment type"
        },
        "created_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "created at timestamp"
        },
        "uploaded_by" : {
          "type" : "string",
          "title" : "uploaded by"
        }
      }
    },
    "ContactDetailAddress" : {
      "type" : "object",
      "properties" : {
        "address1" : {
          "type" : "string",
          "title" : "address_line 1"
        },
        "address2" : {
          "type" : "string",
          "title" : "address line 2"
        },
        "city" : {
          "type" : "string",
          "title" : "city"
        },
        "post_code" : {
          "type" : "string",
          "title" : "post_code"
        },
        "country" : {
          "type" : "string",
          "title" : "country"
        }
      },
      "title" : "Address details"
    },
    "EmployeeListAttachmentResponseEmployeeAttachmentPayload" : {
      "type" : "object",
      "properties" : {
        "attachment_id" : {
          "type" : "string",
          "title" : "unique identifier of the newly created attachment record"
        },
        "attachment_path" : {
          "type" : "string",
          "title" : "attachment path"
        },
        "attachment_type" : {
          "type" : "string",
          "title" : "attachment type"
        },
        "uploaded_by" : {
          "type" : "string",
          "title" : "uploaded by"
        },
        "created_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "created at timestamp"
        }
      }
    },
    "GetEmployeeTrainingResponseEmployeeTrainingResponse" : {
      "type" : "object",
      "properties" : {
        "trainee_id" : {
          "type" : "string",
          "title" : "Unique id of trainee employee"
        },
        "trainer_id" : {
          "type" : "string",
          "title" : "Unique id of trainer employee"
        },
        "training_subject" : {
          "type" : "string",
          "title" : "Subject of the training"
        },
        "training_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "Date of the training"
        },
        "attachment_file" : {
          "type" : "string",
          "title" : "Attachment file regarding training"
        },
        "client_id" : {
          "type" : "string",
          "title" : "Unique id for the client"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "organization id of the employee working for client"
        },
        "employee_training_id" : {
          "type" : "string",
          "title" : "Unique id of the training for employee"
        },
        "created_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "Date of training creation"
        }
      }
    },
    "ListCheckResponseCheckResponse" : {
      "type" : "object",
      "properties" : {
        "check_id" : {
          "type" : "string",
          "title" : "unique identifier for the check"
        },
        "title" : {
          "type" : "string",
          "title" : "title of the check"
        },
        "instruction" : {
          "type" : "string",
          "title" : "detail instruction of the check"
        },
        "employee_id" : {
          "type" : "string",
          "title" : "employee the check is assigned to"
        },
        "start_time" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "check must start by at least this time. Start time is combination of\nappointment date and time"
        },
        "check_time" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "checked in time for check_type=opening or checked out time for\ncheck_type=closing"
        },
        "check_type" : {
          "type" : "string",
          "title" : "check_type = opening for opening check and check_type = closing for\nclosing check"
        },
        "created_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "time generated by system at the instance the opening_check was created"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "organization id of the check"
        }
      },
      "title" : "Check definition"
    },
    "ListClientEmployeeResponseClientEmployeeResponse" : {
      "type" : "object",
      "properties" : {
        "client_employee_id" : {
          "type" : "string"
        },
        "client_id" : {
          "type" : "string",
          "title" : "client the employee is assigned to"
        },
        "designation_id" : {
          "type" : "string",
          "title" : "designation of employee in the client"
        },
        "employee_id" : {
          "type" : "string",
          "title" : "employee the client is assigned to"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "organization id of the client-employee link"
        },
        "shift" : {
          "type" : "string",
          "title" : "shift of the employee for the client"
        }
      }
    },
    "ListClientMobilizationResponseClientMobilizationResponse" : {
      "type" : "object",
      "properties" : {
        "client_id" : {
          "type" : "string",
          "title" : "client id for the mobilization"
        },
        "category" : {
          "type" : "string",
          "title" : "category of mobilization"
        },
        "subject" : {
          "type" : "string",
          "title" : "subject of mobilization"
        },
        "message" : {
          "type" : "string",
          "title" : "message for the mobilization"
        },
        "by" : {
          "title" : "mobilization by",
          "$ref" : "#/definitions/fmMobilizationPrincipal"
        },
        "to" : {
          "title" : "mobilization to",
          "$ref" : "#/definitions/fmMobilizationPrincipal"
        },
        "date_of_mobilization" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "mobilization date"
        },
        "client_mobilization_id" : {
          "type" : "string",
          "title" : "unique id of the client mobilization"
        },
        "created_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "date of mobilization creation"
        }
      }
    },
    "ListClientResponseClientResponse" : {
      "type" : "object",
      "properties" : {
        "client_id" : {
          "type" : "string",
          "title" : "unique identifier of the client"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "organization id the client belongs to"
        },
        "client_code" : {
          "type" : "string",
          "format" : "int64",
          "title" : "client code"
        },
        "name" : {
          "type" : "string",
          "title" : "unique name of the client"
        },
        "contact_detail" : {
          "title" : "contact details of the client",
          "$ref" : "#/definitions/fmContactDetail"
        },
        "client_detail" : {
          "title" : "information details of the client",
          "$ref" : "#/definitions/fmClientDetail"
        },
        "contact_people" : {
          "type" : "array",
          "title" : "Contact Person details of the client. Backend saves to\nClientContactPersonService",
          "items" : {
            "$ref" : "#/definitions/fmContactPerson"
          }
        },
        "bank_account_details" : {
          "title" : "Bank account details of the client",
          "$ref" : "#/definitions/fmBankAccountDetails"
        },
        "created_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "time the client was created at"
        },
        "confidential_contact_people" : {
          "type" : "array",
          "title" : "Confidential Contact Person detail of the client",
          "items" : {
            "$ref" : "#/definitions/fmContactPerson"
          }
        }
      },
      "title" : "individual client response"
    },
    "ListCorrectionResponseCorrectionResponse" : {
      "type" : "object",
      "properties" : {
        "tasks" : {
          "title" : "list of timesheet data",
          "$ref" : "#/definitions/fmTimesheetResponse"
        },
        "correction_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "correction time of the task report"
        },
        "status" : {
          "type" : "string",
          "title" : "approved or suspended"
        },
        "corrected_by" : {
          "type" : "string",
          "title" : "name of the person who correctes timesheet"
        },
        "approved_by" : {
          "type" : "string",
          "title" : "name of the person whho approves this correction"
        }
      }
    },
    "ListDepartmentResponseDepartmentResponse" : {
      "type" : "object",
      "properties" : {
        "department_id" : {
          "type" : "string"
        },
        "title" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "organization_id" : {
          "type" : "string"
        }
      }
    },
    "ListDesignationResponseDesignationResponse" : {
      "type" : "object",
      "properties" : {
        "designation_id" : {
          "type" : "string"
        },
        "title" : {
          "type" : "string"
        },
        "department_id" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "organization_id" : {
          "type" : "string"
        }
      }
    },
    "ListEmployeeResponseEmployeeResponse" : {
      "type" : "object",
      "properties" : {
        "employee_id" : {
          "type" : "string",
          "title" : "unique id of the employee"
        },
        "first_name" : {
          "type" : "string",
          "title" : "first name of the employee"
        },
        "middle_name" : {
          "type" : "string",
          "title" : "middle_name of the employee"
        },
        "last_name" : {
          "type" : "string",
          "title" : "last name of the employee"
        },
        "contact_detail" : {
          "title" : "contact details of the employee",
          "$ref" : "#/definitions/fmContactDetail"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "organization the employee belongs to"
        },
        "created_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "time the employee was created"
        },
        "employee_info" : {
          "title" : "Employee information",
          "$ref" : "#/definitions/fmEmployeeInformationForListing"
        },
        "confidential_employee_info" : {
          "title" : "Confidential employee information",
          "$ref" : "#/definitions/fmConfidentialEmployeeInfo"
        },
        "status" : {
          "type" : "string",
          "title" : "Employee status"
        },
        "training_info" : {
          "type" : "array",
          "title" : "trainig Information filled by the organization",
          "items" : {
            "$ref" : "#/definitions/fmTrainingEmployeeInfo"
          }
        },
        "history_info" : {
          "type" : "array",
          "title" : "employment history Information filled by the organization",
          "items" : {
            "$ref" : "#/definitions/fmEmploymentHistoryInfo"
          }
        },
        "reference_employee_info" : {
          "type" : "array",
          "title" : "Reference Information about the employee",
          "items" : {
            "$ref" : "#/definitions/fmReferenceEmployeeInfo"
          }
        },
        "criminal_conv_emp_info" : {
          "type" : "array",
          "title" : "Criminal Conviction Information about the employee",
          "items" : {
            "$ref" : "#/definitions/fmCriminalConvictionEmployeeInfo"
          }
        },
        "next_of_keen_employee_info" : {
          "title" : "Next of kee Information about the employee",
          "$ref" : "#/definitions/fmNextOfKeenEmployeeInfo"
        },
        "education_employee_info" : {
          "type" : "array",
          "title" : "education Information about the employee",
          "items" : {
            "$ref" : "#/definitions/fmEducationEmployeeInformation"
          }
        }
      },
      "title" : "individual employee record"
    },
    "ListInventoryCategoryResponseInventoryCategory" : {
      "type" : "object",
      "properties" : {
        "organization_id" : {
          "type" : "string",
          "title" : "Organization id"
        },
        "category_name" : {
          "type" : "string",
          "title" : "Inventory category name"
        },
        "created_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "Created At"
        },
        "category_detail" : {
          "type" : "string",
          "title" : "Category detail"
        },
        "parent_category_id" : {
          "type" : "string",
          "title" : "Parent category"
        },
        "status" : {
          "type" : "string",
          "title" : "Status"
        }
      },
      "title" : "Single Inventory category"
    },
    "ListInventoryItemResponseInventoryItem" : {
      "type" : "object",
      "properties" : {
        "organization_id" : {
          "type" : "string",
          "title" : "Organization id for the item"
        },
        "item_name" : {
          "type" : "string",
          "title" : "Item name"
        },
        "category_id" : {
          "type" : "string",
          "title" : "Item Category"
        },
        "category_name" : {
          "type" : "string",
          "title" : "Category name"
        },
        "supplier_id" : {
          "type" : "string",
          "title" : "Supplier id"
        },
        "unit_price" : {
          "type" : "number",
          "format" : "float",
          "title" : "Unit price"
        },
        "item_code" : {
          "type" : "string",
          "title" : "Item code"
        },
        "comment" : {
          "type" : "string",
          "title" : "Comment on the item"
        },
        "created_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "Created at"
        }
      },
      "title" : "Single inventory item"
    },
    "ListJobTypeResponseJobTypeResponse" : {
      "type" : "object",
      "properties" : {
        "job_type_id" : {
          "type" : "string"
        },
        "title" : {
          "type" : "string"
        },
        "organization_id" : {
          "type" : "string"
        }
      }
    },
    "ListMeetingResponseMeetingResponse" : {
      "type" : "object",
      "properties" : {
        "meeting_id" : {
          "type" : "string",
          "title" : "unique identifier of the meeting"
        },
        "meeting_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "date of the meeting"
        },
        "estimated_time" : {
          "type" : "string",
          "title" : "duration time of the meeting"
        },
        "title" : {
          "type" : "string",
          "title" : "title of the meeting"
        },
        "raised_by" : {
          "type" : "string",
          "title" : "employee_id of employee who raised the meeting"
        },
        "attendee_ids" : {
          "type" : "array",
          "title" : "attendees of  meeting",
          "items" : {
            "type" : "string"
          }
        },
        "department_id" : {
          "type" : "string",
          "title" : "department id of the meeting"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "organization id of the meeting"
        },
        "created_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "timestamp at which the meeting was created"
        }
      },
      "title" : "individual meeting response"
    },
    "ListOrganizationResponseOrganizationResponse" : {
      "type" : "object",
      "properties" : {
        "organization_id" : {
          "type" : "string",
          "title" : "unique id of organization"
        },
        "name" : {
          "type" : "string",
          "title" : "name of organization"
        },
        "contact_detail" : {
          "title" : "contact details of the organization",
          "$ref" : "#/definitions/fmContactDetail"
        },
        "created_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "time the organization is created at"
        }
      },
      "title" : "inividual organization response"
    },
    "ListTaskByClientResponseTaskByClientResponse" : {
      "type" : "object",
      "properties" : {
        "employee_id" : {
          "type" : "string",
          "title" : "unique identifier of the employee involved with the client"
        },
        "task_id" : {
          "type" : "string",
          "title" : "unique identifier of the task completed by employee on the client in\nparticular date"
        },
        "check_in_time" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "check in time of the task on the particular date"
        },
        "check_out_time" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "check out time of the task on the particular date"
        },
        "title" : {
          "type" : "string",
          "title" : "task title"
        }
      }
    },
    "ListTaskResponseTaskResponse" : {
      "type" : "object",
      "properties" : {
        "task_id" : {
          "type" : "string",
          "title" : "unique identifier for the task"
        },
        "title" : {
          "type" : "string",
          "title" : "title (name) of the task"
        },
        "description" : {
          "type" : "string",
          "title" : "description of the task"
        },
        "client_id" : {
          "type" : "string",
          "title" : "client the task is associated with. Optional"
        },
        "employee_id" : {
          "type" : "string",
          "title" : "employee the task is assigned to"
        },
        "start_time" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "task must start by at least this time. Start time is combination of\nappointment date and time"
        },
        "estimate_time" : {
          "type" : "string",
          "title" : "the estimated time period to complete the task"
        },
        "actual_in" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "time the task was checked in"
        },
        "actual_out" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "time the task was checked out"
        },
        "created_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "time generated by system at the instance the task was created"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "organization id of the employee"
        },
        "is_variation" : {
          "type" : "boolean",
          "title" : "flag to confirm if the task is variation or not"
        },
        "correction" : {
          "type" : "string",
          "title" : "correction duration of the task"
        }
      },
      "title" : "Task definition"
    },
    "PeriodicBudgetPBudget" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "hours" : {
          "type" : "number",
          "format" : "float"
        },
        "amount" : {
          "type" : "number",
          "format" : "float"
        }
      }
    },
    "UpdateTaskByClientRequestUpdateTaskByClient" : {
      "type" : "object",
      "properties" : {
        "task_id" : {
          "type" : "string",
          "title" : "unique id of the task"
        },
        "check_in_time" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "time the task was checked in"
        },
        "check_out_time" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "time the task was checked out"
        },
        "contracted_hours" : {
          "type" : "string",
          "title" : "contracted hours of the employee with the client"
        }
      }
    },
    "UpdateTaskByEmployeeRequestUpdateTaskByEmployee" : {
      "type" : "object",
      "properties" : {
        "task_id" : {
          "type" : "string",
          "title" : "unique id of the task"
        },
        "check_in_time" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "time the task was checked in"
        },
        "check_out_time" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "time the task was checked out"
        },
        "contracted_hours" : {
          "type" : "string",
          "title" : "contracted hours of the employee with the client"
        }
      }
    },
    "fmAgenda" : {
      "type" : "object",
      "properties" : {
        "title" : {
          "type" : "string",
          "title" : "title of agenda"
        },
        "description" : {
          "type" : "string",
          "title" : "description of agenda"
        },
        "proposed_by" : {
          "type" : "string",
          "title" : "id of the employee that proposed the agenda"
        },
        "estimated_time" : {
          "type" : "string",
          "title" : "estimated time to discuss the agenda"
        }
      }
    },
    "fmAgendaUpdateDetail" : {
      "type" : "object",
      "properties" : {
        "agenda_id" : {
          "type" : "string",
          "title" : "id of agenda for update"
        },
        "agenda" : {
          "type" : "string",
          "title" : "title of agenda"
        },
        "description" : {
          "type" : "string",
          "title" : "description of agenda"
        }
      }
    },
    "fmArea" : {
      "type" : "object",
      "properties" : {
        "total_area" : {
          "type" : "string"
        },
        "area" : {
          "type" : "string"
        },
        "area_manager" : {
          "type" : "string",
          "title" : "Area manager employee_id"
        }
      }
    },
    "fmAssignClientEmployeeShiftRequest" : {
      "type" : "object",
      "properties" : {
        "client_employee_id" : {
          "type" : "string",
          "title" : "unique id of client employee relation"
        },
        "shift" : {
          "type" : "string",
          "title" : "shift of the employee for the client"
        },
        "shift_time" : {
          "type" : "string",
          "title" : "shift time of the employee for the client"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "organization id of the client employee relation"
        }
      },
      "title" : "Request for client-employee shift assignment"
    },
    "fmAssignClientEmployeeShiftResponse" : {
      "type" : "object",
      "properties" : {
        "client_employee_id" : {
          "type" : "string",
          "title" : "unique id of client employee relation"
        }
      },
      "title" : "Response for client-employee shift assignment"
    },
    "fmAssignContractedHoursRequest" : {
      "type" : "object",
      "properties" : {
        "organization_id" : {
          "type" : "string",
          "title" : "organization id of the client employee relation"
        },
        "shift" : {
          "type" : "string",
          "title" : "shift of the employee for the client"
        },
        "shift_time" : {
          "type" : "string",
          "title" : "shift time of the employee for the client"
        },
        "break_time" : {
          "type" : "string",
          "title" : "break time"
        },
        "is_paid_break" : {
          "type" : "boolean",
          "title" : "is break paid"
        },
        "wd_rate" : {
          "type" : "number",
          "format" : "float",
          "title" : "week days rate"
        },
        "we_rate" : {
          "type" : "number",
          "format" : "float",
          "title" : "weekend days rate"
        },
        "currency" : {
          "type" : "string",
          "title" : "rate currency"
        },
        "contracted_day_hours" : {
          "type" : "array",
          "title" : "contracted hours for the day of the week",
          "items" : {
            "$ref" : "#/definitions/fmContractedDayHours"
          }
        },
        "start_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "contract start date"
        },
        "end_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "contract end date"
        },
        "client_employee_id" : {
          "type" : "string",
          "title" : "unique id of client employee relation"
        }
      }
    },
    "fmAssignContractedHoursResponse" : {
      "type" : "object",
      "properties" : {
        "client_employee_id" : {
          "type" : "string",
          "title" : "unique id of client employee relation"
        }
      }
    },
    "fmAssignTargetTasksRequest" : {
      "type" : "object",
      "properties" : {
        "client_employee_id" : {
          "type" : "string",
          "title" : "unique identifier for the client employee relation"
        },
        "start_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "start date for target tasks"
        },
        "end_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "end date for target tasks"
        },
        "weekly_target_tasks" : {
          "type" : "object",
          "title" : "The target tasks for the 7 days",
          "additionalProperties" : {
            "type" : "string",
            "format" : "int64"
          }
        }
      },
      "title" : "Request for assigning target tasks to an employee"
    },
    "fmAssignTargetTasksResponse" : {
      "type" : "object",
      "properties" : {
        "client_employee_id" : {
          "type" : "string",
          "title" : "unique identifier for the client employee relation"
        }
      },
      "title" : "Response for assigning target tasks to an employee"
    },
    "fmAssociateWithEmployeeRequest" : {
      "type" : "object",
      "properties" : {
        "employee_id" : {
          "type" : "string",
          "title" : "id the employee to associate"
        },
        "user_id" : {
          "type" : "string",
          "title" : "user_id to associate"
        },
        "roles" : {
          "type" : "array",
          "title" : "roles for this association",
          "items" : {
            "type" : "string"
          }
        },
        "scopes" : {
          "type" : "array",
          "title" : "scopes for this association",
          "items" : {
            "type" : "string"
          }
        },
        "organization_id" : {
          "type" : "string",
          "title" : "id of organization"
        }
      }
    },
    "fmBankAccountDetails" : {
      "type" : "object",
      "properties" : {
        "bank_name" : {
          "type" : "string",
          "title" : "Name of the bank"
        },
        "branch_name" : {
          "type" : "string",
          "title" : "Branch name"
        },
        "account_number" : {
          "type" : "string",
          "title" : "Account number"
        },
        "s_code" : {
          "type" : "string",
          "title" : "some code"
        },
        "account_holder_name" : {
          "type" : "string",
          "title" : "account holder name"
        }
      },
      "title" : "Bank accounts details collection"
    },
    "fmBudget" : {
      "type" : "object",
      "properties" : {
        "labour_budget" : {
          "$ref" : "#/definitions/fmLabourBudget"
        },
        "store_budget" : {
          "$ref" : "#/definitions/fmStoreBudget"
        },
        "periodic_budget" : {
          "$ref" : "#/definitions/fmPeriodicBudget"
        }
      }
    },
    "fmChangeTimesheetCorrectionStatusRequest" : {
      "type" : "object",
      "properties" : {
        "timesheet_correction_id" : {
          "type" : "string",
          "title" : "timesheet correction id"
        },
        "status" : {
          "type" : "string",
          "title" : "Status to change to either `PENDING`, `APPROVED`, `REJECTED`"
        }
      }
    },
    "fmChangeTimesheetCorrectionStatusResponse" : {
      "type" : "object",
      "properties" : {
        "timesheet_correction_id" : {
          "type" : "string",
          "title" : "timesheet correcetion id"
        }
      }
    },
    "fmCheckInOutRequest" : {
      "type" : "object",
      "properties" : {
        "check_id" : {
          "type" : "string",
          "title" : "check in or out to particular check item with check_id"
        }
      },
      "title" : "Request for checking in to opening_check and checking out to closing_check"
    },
    "fmCheckinTaskRequest" : {
      "type" : "object",
      "properties" : {
        "task_id" : {
          "type" : "string"
        }
      },
      "title" : "Request for checking in to task"
    },
    "fmCheckoutTaskRequest" : {
      "type" : "object",
      "properties" : {
        "task_id" : {
          "type" : "string",
          "title" : "id of the task to checkout"
        }
      },
      "title" : "Request for checking out from task"
    },
    "fmClientAddAttachmentRequest" : {
      "type" : "object",
      "properties" : {
        "client_id" : {
          "type" : "string",
          "title" : "unique identifier of the client"
        },
        "attachment_path" : {
          "type" : "string",
          "title" : "path of attachment"
        },
        "attachment_type" : {
          "type" : "string",
          "title" : "type of attachment"
        },
        "uploaded_by" : {
          "type" : "string",
          "title" : "uploaded by"
        }
      }
    },
    "fmClientAddAttachmentResponse" : {
      "type" : "object",
      "properties" : {
        "attachment_id" : {
          "type" : "string",
          "title" : "unique identifier of the newly created attachment record"
        }
      }
    },
    "fmClientChangeStatusRequest" : {
      "type" : "object",
      "properties" : {
        "client_id" : {
          "type" : "string",
          "title" : "unique identifier of the client"
        },
        "status" : {
          "type" : "string",
          "title" : "status to change to"
        }
      },
      "title" : "Request for changing status of client"
    },
    "fmClientChangeStatusResponse" : {
      "type" : "object",
      "properties" : {
        "client_id" : {
          "type" : "string",
          "title" : "unique identifier of the client"
        }
      }
    },
    "fmClientDate" : {
      "type" : "object",
      "properties" : {
        "start_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "Start of the contract with the client"
        },
        "end_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "End of the contract with the client"
        },
        "effective_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "last_review_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "renew_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "Date in which client contract is expected to be renewed next time"
        }
      }
    },
    "fmClientDetail" : {
      "type" : "object",
      "properties" : {
        "area" : {
          "title" : "Area",
          "$ref" : "#/definitions/fmArea"
        },
        "sector" : {
          "type" : "string"
        },
        "reason_for_costing" : {
          "type" : "string"
        },
        "date" : {
          "$ref" : "#/definitions/fmClientDate"
        },
        "contracted_day_hours" : {
          "type" : "array",
          "title" : "Contracted hours",
          "items" : {
            "$ref" : "#/definitions/fmContractedHours"
          }
        },
        "status" : {
          "type" : "string",
          "title" : "This field is only used in list and detail API\nOther APIs will ignore this field"
        },
        "site_supervisor" : {
          "title" : "Site supervisor aka client supervisor",
          "$ref" : "#/definitions/fmContactPerson"
        },
        "region" : {
          "title" : "Region",
          "$ref" : "#/definitions/fmRegion"
        },
        "budget" : {
          "title" : "Budgets",
          "$ref" : "#/definitions/fmBudget"
        },
        "client_code" : {
          "type" : "string",
          "format" : "int64",
          "title" : "client code"
        },
        "invoice" : {
          "type" : "array",
          "title" : "Invoice",
          "items" : {
            "$ref" : "#/definitions/fmInvoice"
          }
        }
      }
    },
    "fmClientDetailResponse" : {
      "type" : "object",
      "properties" : {
        "client_id" : {
          "type" : "string",
          "title" : "unique identifier of the client"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "organization id the client belongs to"
        },
        "name" : {
          "type" : "string",
          "title" : "unique name of the client"
        },
        "contact_detail" : {
          "title" : "contact detail of the client",
          "$ref" : "#/definitions/fmContactDetail"
        },
        "created_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "time the client was created at"
        },
        "client_detail" : {
          "title" : "information details of the client",
          "$ref" : "#/definitions/fmClientDetail"
        },
        "confidential_contact_people" : {
          "type" : "array",
          "title" : "Confidential contact person details of the client. Backend saves to\nClientContactPersonService",
          "items" : {
            "$ref" : "#/definitions/fmContactPerson"
          }
        },
        "bank_account_details" : {
          "title" : "Bank account details of the client",
          "$ref" : "#/definitions/fmBankAccountDetails"
        },
        "contact_people" : {
          "type" : "array",
          "title" : "List of contact perople details of the client. Backend saves to\nClientContactPersonService",
          "items" : {
            "$ref" : "#/definitions/fmContactPerson"
          }
        }
      },
      "title" : "Response for client detail"
    },
    "fmClientListAttachmentResponse" : {
      "type" : "object",
      "properties" : {
        "client_id" : {
          "type" : "string",
          "title" : "unique identifier of the client"
        },
        "attachments" : {
          "type" : "array",
          "title" : "list of attachments",
          "items" : {
            "$ref" : "#/definitions/ClientListAttachmentResponseClientAttachmentPayload"
          }
        }
      }
    },
    "fmConfidentialEmployeeDetails" : {
      "type" : "object",
      "properties" : {
        "dob" : {
          "type" : "string",
          "title" : "date of birth"
        },
        "national_insurance_number" : {
          "type" : "string",
          "title" : "National insurance number"
        },
        "tax_code" : {
          "type" : "string",
          "title" : "Tax code"
        }
      },
      "title" : "General Confidential Employee Details"
    },
    "fmConfidentialEmployeeInfo" : {
      "type" : "object",
      "properties" : {
        "employee_details" : {
          "title" : "Employee details",
          "$ref" : "#/definitions/fmConfidentialEmployeeDetails"
        },
        "bank_account_details" : {
          "title" : "Bank details",
          "$ref" : "#/definitions/fmBankAccountDetails"
        }
      },
      "title" : "Confidential Employee information"
    },
    "fmContactDetail" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string",
          "title" : "email address"
        },
        "phone" : {
          "type" : "string",
          "title" : "phone number"
        },
        "address" : {
          "title" : "address",
          "$ref" : "#/definitions/ContactDetailAddress"
        },
        "mobile" : {
          "type" : "string",
          "title" : "Mobile phone number"
        },
        "website" : {
          "type" : "string",
          "title" : "website of the contact"
        },
        "contact_no" : {
          "type" : "string",
          "title" : "contact number\nNOTE: creating and not deleting older fields for backward compatibility"
        }
      }
    },
    "fmContactPerson" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "designation" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "phone" : {
          "type" : "string"
        },
        "mobile" : {
          "type" : "string"
        },
        "position" : {
          "type" : "string"
        }
      }
    },
    "fmContractedDayHours" : {
      "type" : "object",
      "properties" : {
        "day" : {
          "type" : "string",
          "title" : "day of the week"
        },
        "hours" : {
          "type" : "number",
          "format" : "float",
          "title" : "contracted hours for the day"
        }
      }
    },
    "fmContractedHours" : {
      "type" : "object",
      "properties" : {
        "job_type_id" : {
          "type" : "string",
          "title" : "NOTE: even though this is not used currently,\nwe will not be removing this field because it might be added\nagain soon"
        },
        "start_time" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "Start time of shifts in the client"
        },
        "end_time" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "End time of shifts in the client"
        },
        "shift_name" : {
          "type" : "string",
          "title" : "Some name for the shift like morning, evening"
        },
        "daywise_hours" : {
          "type" : "array",
          "title" : "Hourly shifts daywise in the contract",
          "items" : {
            "$ref" : "#/definitions/fmContractedDayHours"
          }
        }
      }
    },
    "fmCoverResponse" : {
      "type" : "object",
      "properties" : {
        "employee_id" : {
          "type" : "string",
          "title" : "Employee id of employee who has requested a leave/holiday"
        },
        "leave_from_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "Leave from date"
        },
        "leave_to_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "Leave upto date"
        },
        "covered_by_employee_id" : {
          "type" : "string",
          "title" : "The employee who will be covering the absentee employee"
        },
        "client_id" : {
          "type" : "string",
          "title" : "Client at which the employee is taking a lave"
        },
        "status" : {
          "type" : "string",
          "title" : "Status of the holiday request"
        },
        "created_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "The timestamp at which holiday record was created"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "Organization id of the employee"
        },
        "leave_id" : {
          "type" : "string",
          "title" : "leave id"
        },
        "leave_type" : {
          "type" : "string",
          "title" : "leave type"
        }
      },
      "title" : "Single cover Payload"
    },
    "fmCreateCheckRequest" : {
      "type" : "object",
      "properties" : {
        "title" : {
          "type" : "string",
          "title" : "title of the check"
        },
        "instruction" : {
          "type" : "string",
          "title" : "detail instruction of the opening_check"
        },
        "employee_id" : {
          "type" : "string",
          "title" : "employee the opening_check is assigned to"
        },
        "check_type" : {
          "type" : "string",
          "title" : "check_type = opening for opening check and check_type = closing for closing\ncheck"
        },
        "start_time" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "check must start by at least this time. Start time is combination of\nappointment date and time"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "organization id"
        }
      },
      "title" : "Request to create check"
    },
    "fmCreateCheckResponse" : {
      "type" : "object",
      "properties" : {
        "check_id" : {
          "type" : "string",
          "title" : "unique id of the check"
        }
      },
      "title" : "Response from create check"
    },
    "fmCreateClientDate" : {
      "type" : "object",
      "properties" : {
        "start_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "Start of the contract with the client"
        },
        "end_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "End of the contract with the client"
        },
        "effective_date" : {
          "type" : "string",
          "format" : "date-time"
        },
        "renew_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "Date in which client contract is expected to be renewed next time"
        }
      }
    },
    "fmCreateClientDetail" : {
      "type" : "object",
      "properties" : {
        "area" : {
          "title" : "Area",
          "$ref" : "#/definitions/fmArea"
        },
        "sector" : {
          "type" : "string"
        },
        "reason_for_costing" : {
          "type" : "string"
        },
        "date" : {
          "$ref" : "#/definitions/fmCreateClientDate"
        },
        "contracted_day_hours" : {
          "type" : "array",
          "title" : "Contracted hours",
          "items" : {
            "$ref" : "#/definitions/fmContractedHours"
          }
        },
        "site_supervisor" : {
          "title" : "Site supervisor aka client supervisor",
          "$ref" : "#/definitions/fmContactPerson"
        },
        "region" : {
          "title" : "Region",
          "$ref" : "#/definitions/fmRegion"
        },
        "budget" : {
          "title" : "Budgets",
          "$ref" : "#/definitions/fmBudget"
        },
        "invoice" : {
          "type" : "array",
          "title" : "Invoice",
          "items" : {
            "$ref" : "#/definitions/fmInvoice"
          }
        }
      }
    },
    "fmCreateClientEmployeeRequest" : {
      "type" : "object",
      "properties" : {
        "client_id" : {
          "type" : "string",
          "title" : "client the employee is assigned to"
        },
        "employee_id" : {
          "type" : "string",
          "title" : "employee the client is assigned to"
        },
        "designation_id" : {
          "type" : "string",
          "title" : "designation of employee in the client"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "organization id of the client employee relation"
        },
        "wd_rate" : {
          "type" : "number",
          "format" : "float",
          "title" : "week days rate"
        },
        "we_rate" : {
          "type" : "number",
          "format" : "float",
          "title" : "weekend days rate"
        },
        "currency" : {
          "type" : "string",
          "title" : "rate currency"
        },
        "shift_contracted_day_hours" : {
          "type" : "array",
          "title" : "multiple shift for employee in a single client",
          "items" : {
            "$ref" : "#/definitions/fmShiftContractedDayHours"
          }
        },
        "start_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "contract start date"
        },
        "end_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "contract end date"
        }
      }
    },
    "fmCreateClientEmployeeResponse" : {
      "type" : "object",
      "properties" : {
        "client_employee_id" : {
          "type" : "string"
        }
      }
    },
    "fmCreateClientMobilizationRequest" : {
      "type" : "object",
      "properties" : {
        "client_id" : {
          "type" : "string",
          "title" : "client id for the mobilization"
        },
        "category" : {
          "type" : "string",
          "title" : "category of mobilization"
        },
        "subject" : {
          "type" : "string",
          "title" : "subject of mobilization"
        },
        "message" : {
          "type" : "string",
          "title" : "message for the mobilization"
        },
        "by" : {
          "title" : "mobilization by",
          "$ref" : "#/definitions/fmMobilizationPrincipal"
        },
        "to" : {
          "title" : "mobilization to",
          "$ref" : "#/definitions/fmMobilizationPrincipal"
        },
        "date_of_mobilization" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "mobilization date"
        }
      },
      "title" : "Request to create client mobilization"
    },
    "fmCreateClientMobilizationResponse" : {
      "type" : "object",
      "properties" : {
        "client_mobilization_id" : {
          "type" : "string",
          "title" : "unique id of the mobilization"
        }
      },
      "title" : "Response for client mobilization creation"
    },
    "fmCreateClientRequest" : {
      "type" : "object",
      "properties" : {
        "organization_id" : {
          "type" : "string",
          "title" : "id of the organization this client belongs to"
        },
        "name" : {
          "type" : "string",
          "title" : "unique name of the client"
        },
        "contact_detail" : {
          "title" : "contact details of the client",
          "$ref" : "#/definitions/fmContactDetail"
        },
        "client_detail" : {
          "title" : "information details of the client",
          "$ref" : "#/definitions/fmCreateClientDetail"
        },
        "contact_people" : {
          "type" : "array",
          "title" : "Contact people details of the client. Backend saves to\nClientContactPersonService",
          "items" : {
            "$ref" : "#/definitions/fmContactPerson"
          }
        },
        "bank_account_details" : {
          "title" : "Bank account details",
          "$ref" : "#/definitions/fmBankAccountDetails"
        },
        "confidential_contact_people" : {
          "type" : "array",
          "title" : "Confidential Contact Person detail of the client",
          "items" : {
            "$ref" : "#/definitions/fmContactPerson"
          }
        },
        "client_code" : {
          "type" : "string",
          "format" : "int64",
          "title" : "unique code of client within the organization"
        }
      }
    },
    "fmCreateClientResponse" : {
      "type" : "object",
      "properties" : {
        "client_id" : {
          "type" : "string"
        }
      },
      "title" : "Response for create client requests"
    },
    "fmCreateDepartmentRequest" : {
      "type" : "object",
      "properties" : {
        "title" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "organization_id" : {
          "type" : "string"
        }
      }
    },
    "fmCreateDepartmentResponse" : {
      "type" : "object",
      "properties" : {
        "department_id" : {
          "type" : "string"
        }
      }
    },
    "fmCreateDesignationRequest" : {
      "type" : "object",
      "properties" : {
        "title" : {
          "type" : "string",
          "title" : "job title. eg, manager, supervisor, cleaner"
        },
        "department_id" : {
          "type" : "string",
          "title" : "this gives information about the department under which the designation\nfalls"
        },
        "description" : {
          "type" : "string",
          "title" : "admin can add brief details about the designation, if required"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "designation is at organization level and also it is used for authentication"
        }
      }
    },
    "fmCreateDesignationResponse" : {
      "type" : "object",
      "properties" : {
        "designation_id" : {
          "type" : "string"
        }
      }
    },
    "fmCreateEmployeeRequest" : {
      "type" : "object",
      "properties" : {
        "first_name" : {
          "type" : "string",
          "title" : "First Name of the employee"
        },
        "middle_name" : {
          "type" : "string",
          "title" : "Middle name of the employee"
        },
        "last_name" : {
          "type" : "string",
          "title" : "Last name of the employee"
        },
        "contact_detail" : {
          "title" : "contact details of the employee",
          "$ref" : "#/definitions/fmContactDetail"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "organization the employee belongs to"
        },
        "employee_code" : {
          "type" : "string",
          "format" : "int64",
          "title" : "unique employee code for organization"
        },
        "employee_info" : {
          "title" : "Employee information",
          "$ref" : "#/definitions/fmEmployeeInformationForUpsert"
        },
        "confidential_employee_info" : {
          "title" : "Confidential Information about the employee",
          "$ref" : "#/definitions/fmConfidentialEmployeeInfo"
        },
        "training_info" : {
          "type" : "array",
          "title" : "trainig Information filled by the organization",
          "items" : {
            "$ref" : "#/definitions/fmTrainingEmployeeInfo"
          }
        },
        "history_info" : {
          "type" : "array",
          "title" : "employment history Information filled by the organization",
          "items" : {
            "$ref" : "#/definitions/fmEmploymentHistoryInfo"
          }
        },
        "reference_employee_info" : {
          "type" : "array",
          "title" : "Reference Information about the employee",
          "items" : {
            "$ref" : "#/definitions/fmReferenceEmployeeInfo"
          }
        },
        "criminal_conv_emp_info" : {
          "type" : "array",
          "title" : "Criminal Conviction Information about the employee",
          "items" : {
            "$ref" : "#/definitions/fmCriminalConvictionEmployeeInfo"
          }
        },
        "next_of_keen_employee_info" : {
          "title" : "Next of kee Information about the employee",
          "$ref" : "#/definitions/fmNextOfKeenEmployeeInfo"
        },
        "education_employee_info" : {
          "type" : "array",
          "title" : "education Information about the employee",
          "items" : {
            "$ref" : "#/definitions/fmEducationEmployeeInformation"
          }
        }
      },
      "title" : "request to create new employee"
    },
    "fmCreateEmployeeResponse" : {
      "type" : "object",
      "properties" : {
        "employee_id" : {
          "type" : "string",
          "title" : "unique id of the employee"
        }
      },
      "title" : "response returned when reating employee"
    },
    "fmCreateEmployeeSickRequest" : {
      "type" : "object",
      "properties" : {
        "client_id" : {
          "type" : "string",
          "title" : "unique Id of client for which employee is working for"
        },
        "employee_id" : {
          "type" : "string",
          "title" : "unique Id of employee"
        },
        "sick_period" : {
          "title" : "period of requested sick",
          "$ref" : "#/definitions/fmSickPeriod"
        },
        "covered_by_employee_id" : {
          "type" : "string",
          "title" : "covered by employee id"
        },
        "payment" : {
          "type" : "string",
          "title" : "is sick leave paid or unpaid"
        },
        "comment" : {
          "type" : "string",
          "title" : "comment reason for leave"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "unique Id of organization for which employee is working for"
        },
        "sick_entitlement" : {
          "type" : "string",
          "title" : "total number of sick days in a year"
        },
        "remaining_sick_entitlement" : {
          "type" : "string",
          "title" : "remaining sick entitlement"
        }
      },
      "title" : "Request for creating sick of employee"
    },
    "fmCreateEmployeeSickResponse" : {
      "type" : "object",
      "properties" : {
        "employee_sick_id" : {
          "type" : "string",
          "title" : "unique id of employee sick"
        }
      },
      "title" : "Response fro sick creation success"
    },
    "fmCreateEmployeeTrainingRequest" : {
      "type" : "object",
      "properties" : {
        "trainee_id" : {
          "type" : "string",
          "title" : "Unique id of trainee employee"
        },
        "trainer_id" : {
          "type" : "string",
          "title" : "Unique id of trainer employee"
        },
        "training_subject" : {
          "type" : "string",
          "title" : "Subject of the training"
        },
        "training_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "Date of the training"
        },
        "attachment_file" : {
          "type" : "string",
          "title" : "Attachment file regarding training"
        },
        "client_id" : {
          "type" : "string",
          "title" : "Unique id for the client"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "organization id of the employee working for client"
        }
      },
      "title" : "Request to create employee training"
    },
    "fmCreateEmployeeTrainingResponse" : {
      "type" : "object",
      "properties" : {
        "employee_training_id" : {
          "type" : "string",
          "title" : "Unique id of the training for employee"
        }
      },
      "title" : "Response for creating employee training"
    },
    "fmCreateFeedbackRequest" : {
      "type" : "object",
      "properties" : {
        "employee_id" : {
          "type" : "string",
          "title" : "unique id of employee"
        },
        "client_id" : {
          "type" : "string",
          "title" : "unique id of client who is providing feedback"
        },
        "sector" : {
          "type" : "string",
          "title" : "sector of employee"
        },
        "department_id" : {
          "type" : "string",
          "title" : "unique id of department"
        },
        "rating" : {
          "type" : "string",
          "title" : "provided rating"
        },
        "feedback_comments" : {
          "type" : "string",
          "title" : "provided feedback comments"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "organization id"
        }
      }
    },
    "fmCreateFeedbackResponse" : {
      "type" : "object",
      "properties" : {
        "feedback_id" : {
          "type" : "string",
          "title" : "unique id of feedback"
        }
      }
    },
    "fmCreateHolidayRequest" : {
      "type" : "object",
      "properties" : {
        "employee_id" : {
          "type" : "string",
          "title" : "Employee id of employee who has requested a leave/holiday"
        },
        "leave_from_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "Leave from date"
        },
        "leave_to_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "Leave upto date"
        },
        "covered_by_employee_id" : {
          "type" : "string",
          "title" : "The employee who will be covering the absentee employee"
        },
        "client_id" : {
          "type" : "string",
          "title" : "Client at which the employee is taking a lave"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "Organization id of the employee"
        }
      },
      "title" : "Request for creating a holiday for an employee"
    },
    "fmCreateHolidayResponse" : {
      "type" : "object",
      "properties" : {
        "holiday_id" : {
          "type" : "string",
          "title" : "holiday id"
        }
      },
      "title" : "Response for holiday creation success"
    },
    "fmCreateInventoryCategoryRequest" : {
      "type" : "object",
      "properties" : {
        "organization_id" : {
          "type" : "string",
          "title" : "Organization id for the category"
        },
        "category_name" : {
          "type" : "string",
          "title" : "Category name"
        },
        "category_detail" : {
          "type" : "string",
          "title" : "Category detail"
        },
        "parent_category_id" : {
          "type" : "string",
          "title" : "Parent category id"
        },
        "status" : {
          "type" : "string",
          "title" : "Status"
        }
      },
      "title" : "Request to create a new inventory item category"
    },
    "fmCreateInventoryCategoryResponse" : {
      "type" : "object",
      "properties" : {
        "inventory_category_id" : {
          "type" : "string",
          "title" : "Inventory category id"
        }
      },
      "title" : "Response for successful creation of a inventory category"
    },
    "fmCreateInventoryItemRequest" : {
      "type" : "object",
      "properties" : {
        "organization_id" : {
          "type" : "string",
          "title" : "Organization id for the item"
        },
        "item_name" : {
          "type" : "string",
          "title" : "Item name"
        },
        "category_id" : {
          "type" : "string",
          "title" : "Item Category"
        },
        "supplier_id" : {
          "type" : "string",
          "title" : "Supplier id"
        },
        "unit_price" : {
          "type" : "number",
          "format" : "float",
          "title" : "Unit price"
        },
        "item_code" : {
          "type" : "string",
          "title" : "Item code"
        },
        "comment" : {
          "type" : "string",
          "title" : "Comment on the item"
        }
      },
      "title" : "Request to create inventory item"
    },
    "fmCreateInventoryItemResponse" : {
      "type" : "object",
      "properties" : {
        "inventory_item_id" : {
          "type" : "string",
          "title" : "Inventory item id"
        }
      },
      "title" : "Response after successfull creation of inventory item"
    },
    "fmCreateIssueRequest" : {
      "type" : "object",
      "properties" : {
        "raised_by" : {
          "type" : "string",
          "title" : "id of the user raising the issue"
        },
        "assigned_to" : {
          "type" : "string",
          "title" : "id of the user responsible for solving the issue"
        },
        "details" : {
          "type" : "string",
          "title" : "details of the isssue"
        },
        "deadline" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "deadline of solving the issue"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "unique id of the organization"
        },
        "department_id" : {
          "type" : "string",
          "title" : "unique id of the department"
        }
      },
      "title" : "Create issue request"
    },
    "fmCreateIssueResponse" : {
      "type" : "object",
      "properties" : {
        "issue_id" : {
          "type" : "string",
          "title" : "unique id of the issue"
        }
      },
      "title" : "Create issue response"
    },
    "fmCreateJobTypeRequest" : {
      "type" : "object",
      "properties" : {
        "title" : {
          "type" : "string"
        },
        "organization_id" : {
          "type" : "string"
        }
      }
    },
    "fmCreateJobTypeResponse" : {
      "type" : "object",
      "properties" : {
        "job_type_id" : {
          "type" : "string"
        }
      }
    },
    "fmCreateMeetingRequest" : {
      "type" : "object",
      "properties" : {
        "organization_id" : {
          "type" : "string",
          "title" : "id of the organization this meeting belongs to"
        },
        "meeting_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "date of the meeting"
        },
        "estimated_time" : {
          "type" : "string",
          "title" : "estimated time of the meeting"
        },
        "department_id" : {
          "type" : "string",
          "title" : "id of department of generated meeting"
        },
        "raised_by" : {
          "type" : "string",
          "title" : "id of employee owho raised the meeting"
        },
        "attendee_ids" : {
          "type" : "array",
          "title" : "ids of employees who attend the  meetings",
          "items" : {
            "type" : "string"
          }
        },
        "agendas" : {
          "type" : "array",
          "title" : "information of agenda of the meetong",
          "items" : {
            "$ref" : "#/definitions/fmAgenda"
          }
        },
        "client_id" : {
          "type" : "string",
          "title" : "required if meeting is for client else it is optional"
        },
        "title" : {
          "type" : "string",
          "title" : "title of the meeting"
        }
      },
      "title" : "Meeting creation request"
    },
    "fmCreateMeetingResponse" : {
      "type" : "object",
      "properties" : {
        "meeting_id" : {
          "type" : "string"
        }
      },
      "title" : "Response for create meeting requests"
    },
    "fmCreateNoteRequest" : {
      "type" : "object",
      "properties" : {
        "organization_id" : {
          "type" : "string",
          "title" : "id of the organization this note belongs to"
        },
        "created_by" : {
          "type" : "string",
          "title" : "id of the note creater"
        },
        "for" : {
          "type" : "array",
          "title" : "notes for",
          "items" : {
            "type" : "string"
          }
        },
        "notes" : {
          "type" : "string",
          "title" : "notes detail"
        },
        "note_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "note date"
        }
      },
      "title" : "Create note request"
    },
    "fmCreateNoteResponse" : {
      "type" : "object",
      "properties" : {
        "note_id" : {
          "type" : "string",
          "title" : "unique id of the created note"
        }
      },
      "title" : "Create note response"
    },
    "fmCreateOrganizationRequest" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "title" : "name of the organization"
        },
        "contact_details" : {
          "title" : "contact details of the organization",
          "$ref" : "#/definitions/fmContactDetail"
        }
      }
    },
    "fmCreateOrganizationResponse" : {
      "type" : "object",
      "properties" : {
        "organization_id" : {
          "type" : "string",
          "title" : "unique id of the organization"
        }
      },
      "title" : "response when creating new organization"
    },
    "fmCreateTaskRequest" : {
      "type" : "object",
      "properties" : {
        "title" : {
          "type" : "string",
          "title" : "title (name) of the task"
        },
        "description" : {
          "type" : "string",
          "title" : "description of the task"
        },
        "client_id" : {
          "type" : "string",
          "title" : "client the task is associated with. Optional"
        },
        "employee_id" : {
          "type" : "string",
          "title" : "employee the task is assigned to"
        },
        "start_time" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "task must start by at least this time. Start time is combination of\nappointment date and time"
        },
        "estimate_time" : {
          "type" : "string",
          "title" : "the estimated time period to complete the task"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "the organization of the employee"
        },
        "is_variation" : {
          "type" : "boolean",
          "title" : "flag to confirm if the task is variation or not"
        }
      },
      "title" : "Request to create task"
    },
    "fmCreateTaskResponse" : {
      "type" : "object",
      "properties" : {
        "task_id" : {
          "type" : "string",
          "title" : "unique id of the task"
        }
      },
      "title" : "Response from create task"
    },
    "fmCreateTransferRequest" : {
      "type" : "object",
      "properties" : {
        "employee_id" : {
          "type" : "string",
          "title" : "unique id of employee to transfer"
        },
        "department_id" : {
          "type" : "string",
          "title" : "new department id"
        },
        "from_client_id" : {
          "type" : "string",
          "title" : "unique id of client from which employee is transfered"
        },
        "to_client_id" : {
          "type" : "string",
          "title" : "unique id of client to which employee is transfered"
        },
        "transfer_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "effective date of transfer"
        },
        "transfer_reason" : {
          "type" : "string",
          "title" : "reason of employee transfer"
        },
        "sector" : {
          "type" : "string",
          "title" : "new sector"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "organization id"
        }
      }
    },
    "fmCreateTransferResponse" : {
      "type" : "object",
      "properties" : {
        "transfer_id" : {
          "type" : "string",
          "title" : "unique id of employee transfer"
        }
      }
    },
    "fmCreateUserRequest" : {
      "type" : "object",
      "properties" : {
        "username" : {
          "type" : "string",
          "title" : "username of the user"
        },
        "password" : {
          "type" : "string",
          "title" : "this password is never stored in the server. the hash is calculated and\nstored in the pwd store"
        },
        "name" : {
          "type" : "string",
          "title" : "Name of the user"
        }
      }
    },
    "fmCreateUserResponse" : {
      "type" : "object",
      "properties" : {
        "user_id" : {
          "type" : "string",
          "title" : "id of the created user"
        }
      },
      "title" : "response for create user requests"
    },
    "fmCriminalConvictionEmployeeInfo" : {
      "type" : "object",
      "properties" : {
        "is_subject_to_conditions" : {
          "type" : "boolean",
          "title" : "yes or no"
        },
        "details" : {
          "type" : "string",
          "title" : "details"
        },
        "signature" : {
          "type" : "string",
          "title" : "signature file upload"
        },
        "have_prior_medical_condition" : {
          "type" : "boolean",
          "title" : "have_prior_medical_condition of criminal conviction or not"
        },
        "condition_details" : {
          "type" : "string",
          "title" : "prior_medical_condition details"
        },
        "is_disable" : {
          "type" : "boolean",
          "title" : "is_disable"
        },
        "disable_details" : {
          "type" : "string",
          "title" : "disablity details"
        },
        "adaptation_for_interview" : {
          "type" : "string",
          "title" : "adaptation_for_interview"
        }
      },
      "title" : "CriminalConviction employee information"
    },
    "fmEducationEmployeeInformation" : {
      "type" : "object",
      "properties" : {
        "place_of_edu" : {
          "type" : "string",
          "title" : "place of education of the employee"
        },
        "study_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "education started date"
        },
        "qualification" : {
          "type" : "string",
          "title" : "qualificatioin ofemp"
        },
        "date_obtained" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "education graduated date"
        }
      },
      "title" : "education information of emp"
    },
    "fmEmployeeAddAttachmentRequest" : {
      "type" : "object",
      "properties" : {
        "employee_id" : {
          "type" : "string",
          "title" : "unique identifier of the employee"
        },
        "attachment_path" : {
          "type" : "string",
          "title" : "path of attachment"
        },
        "attachment_type" : {
          "type" : "string",
          "title" : "type of attachment"
        },
        "uploaded_by" : {
          "type" : "string",
          "title" : "uploaded by"
        }
      },
      "title" : "Request payload to add attachment to an employee"
    },
    "fmEmployeeAddAttachmentResponse" : {
      "type" : "object",
      "properties" : {
        "attachment_id" : {
          "type" : "string",
          "title" : "unique identifier of the newly created attachment record"
        }
      },
      "title" : "Success response payload after adding attachment to an employee"
    },
    "fmEmployeeDeleteAttachmentRequest" : {
      "type" : "object",
      "properties" : {
        "attachment_id" : {
          "type" : "string",
          "title" : "unique identifier for an attachment"
        },
        "employee_id" : {
          "type" : "string",
          "title" : "unique identifier for an employee"
        }
      },
      "title" : "Request payload for deleting attachment of an employee"
    },
    "fmEmployeeDeleteAttachmentResponse" : {
      "type" : "object",
      "properties" : {
        "attachment_id" : {
          "type" : "string"
        }
      },
      "title" : "Success response after deleting an attachment of an employee"
    },
    "fmEmployeeDetailResponse" : {
      "type" : "object",
      "properties" : {
        "employee_id" : {
          "type" : "string",
          "title" : "unique identifier of the employee"
        },
        "first_name" : {
          "type" : "string",
          "title" : "first name of the employee"
        },
        "middle_name" : {
          "type" : "string",
          "title" : "middle name of the employee"
        },
        "last_name" : {
          "type" : "string",
          "title" : "last name of the employee"
        },
        "contact_detail" : {
          "title" : "contact detail of the employee",
          "$ref" : "#/definitions/fmContactDetail"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "organization id the employee belongs to"
        },
        "created_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "time the employee was created at"
        },
        "activated_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "Activated date"
        },
        "employee_info" : {
          "title" : "Employee information",
          "$ref" : "#/definitions/fmEmployeeInformationForListing"
        },
        "confidential_employee_info" : {
          "title" : "Confidential Information about the employee",
          "$ref" : "#/definitions/fmConfidentialEmployeeInfo"
        },
        "training_info" : {
          "type" : "array",
          "title" : "trainig Information filled by the organization",
          "items" : {
            "$ref" : "#/definitions/fmTrainingEmployeeInfo"
          }
        },
        "history_info" : {
          "type" : "array",
          "title" : "employment history Information filled by the organization",
          "items" : {
            "$ref" : "#/definitions/fmEmploymentHistoryInfo"
          }
        },
        "reference_employee_info" : {
          "type" : "array",
          "title" : "Reference Information about the employee",
          "items" : {
            "$ref" : "#/definitions/fmReferenceEmployeeInfo"
          }
        },
        "criminal_conv_emp_info" : {
          "type" : "array",
          "title" : "Criminal Conviction Information about the employee",
          "items" : {
            "$ref" : "#/definitions/fmCriminalConvictionEmployeeInfo"
          }
        },
        "next_of_keen_employee_info" : {
          "title" : "Next of kee Information about the employee",
          "$ref" : "#/definitions/fmNextOfKeenEmployeeInfo"
        },
        "education_employee_info" : {
          "type" : "array",
          "title" : "education Information about the employee",
          "items" : {
            "$ref" : "#/definitions/fmEducationEmployeeInformation"
          }
        }
      },
      "title" : "Response for employee detail"
    },
    "fmEmployeeInformationForListing" : {
      "type" : "object",
      "properties" : {
        "general" : {
          "title" : "general information of the employee",
          "$ref" : "#/definitions/fmGeneralEmployeeInformation"
        },
        "official" : {
          "title" : "official information of the employee",
          "$ref" : "#/definitions/fmOfficialEmployeeInformationForListing"
        }
      },
      "title" : "Employee information for list, detail endpoints"
    },
    "fmEmployeeInformationForUpsert" : {
      "type" : "object",
      "properties" : {
        "general" : {
          "title" : "general information of the employee",
          "$ref" : "#/definitions/fmGeneralEmployeeInformation"
        },
        "official" : {
          "title" : "official information of the employee",
          "$ref" : "#/definitions/fmOfficialEmployeeInformationForUpsert"
        }
      },
      "title" : "Employee information for upsert(create/update) endpoints"
    },
    "fmEmployeeLeaverResponse" : {
      "type" : "object",
      "properties" : {
        "leave_id" : {
          "type" : "string",
          "title" : "unique id of the leave"
        },
        "client_id" : {
          "type" : "string",
          "title" : "fetch leaver employees this client_id belongs to"
        },
        "employee_id" : {
          "type" : "string",
          "title" : "unique id of employee"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "fetch leaver employees this organization_id belongs to"
        },
        "leave_from_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "Leave from date"
        },
        "leave_to_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "Leave upto date"
        },
        "status" : {
          "type" : "string",
          "title" : "Status of the leave request"
        },
        "leave_type" : {
          "type" : "string",
          "title" : "leave type"
        },
        "leave_reason" : {
          "type" : "string",
          "title" : "leave reason"
        },
        "created_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "The timestamp at which leave record was created"
        }
      }
    },
    "fmEmployeeListAttachmentResponse" : {
      "type" : "object",
      "properties" : {
        "employee_id" : {
          "type" : "string",
          "title" : "unique identifier of the employee"
        },
        "attachments" : {
          "type" : "array",
          "title" : "list of attachments",
          "items" : {
            "$ref" : "#/definitions/EmployeeListAttachmentResponseEmployeeAttachmentPayload"
          }
        }
      },
      "title" : "Response payload for attachment list request"
    },
    "fmEmployeeSickResponse" : {
      "type" : "object",
      "properties" : {
        "employee_sick_id" : {
          "type" : "string",
          "title" : "unique id of employee sick"
        },
        "client_id" : {
          "type" : "string",
          "title" : "unique Id of client for which employee is working for"
        },
        "employee_id" : {
          "type" : "string",
          "title" : "unique Id of employee"
        },
        "sick_period" : {
          "title" : "period of requested sick",
          "$ref" : "#/definitions/fmSickPeriod"
        },
        "covered_by_employee_id" : {
          "type" : "string",
          "title" : "covered by employee id"
        },
        "payment" : {
          "type" : "string",
          "title" : "is sick leave paid or unpaid"
        },
        "comment" : {
          "type" : "string",
          "title" : "comment reason for leave"
        },
        "status" : {
          "type" : "string",
          "title" : "status of request"
        },
        "sick_entitlement" : {
          "type" : "string",
          "title" : "total number of sick days in a year"
        },
        "remaining_sick_entitlement" : {
          "type" : "string",
          "title" : "remaining sick entitlement"
        },
        "prev_sick_period" : {
          "type" : "array",
          "title" : "previous sick requested period",
          "items" : {
            "$ref" : "#/definitions/fmSickPeriod"
          }
        },
        "created_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "created at"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "unique Id of organization for which employee is working for"
        }
      }
    },
    "fmEmploymentHistoryInfo" : {
      "type" : "object",
      "properties" : {
        "recent_employer" : {
          "type" : "string",
          "title" : "recent employer name"
        },
        "position" : {
          "type" : "string",
          "title" : "position at previous job"
        },
        "contact_name" : {
          "type" : "string",
          "title" : "contact name at recent employment post"
        },
        "contact_person_number" : {
          "type" : "string",
          "title" : "contact person phone number at recent employment post"
        },
        "contact_person_email" : {
          "type" : "string",
          "title" : "contact person email at recent employment post"
        },
        "is_able_to_contact" : {
          "type" : "string",
          "title" : "can the person be able to contact"
        }
      },
      "title" : "history of employment of employee information"
    },
    "fmFeedbackResponse" : {
      "type" : "object",
      "properties" : {
        "employee_id" : {
          "type" : "string",
          "title" : "unique id of employee"
        },
        "client_id" : {
          "type" : "string",
          "title" : "unique id of client who is providing feedback"
        },
        "sector" : {
          "type" : "string",
          "title" : "sector of employee"
        },
        "department_id" : {
          "type" : "string",
          "title" : "unique id of department"
        },
        "rating" : {
          "type" : "string",
          "title" : "provided rating"
        },
        "feedback_comments" : {
          "type" : "string",
          "title" : "provided feedback comments"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "organization id"
        },
        "feedback_id" : {
          "type" : "string",
          "title" : "unique id of feedback"
        },
        "created_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "transfer data creation time"
        }
      }
    },
    "fmGeneralEmployeeInformation" : {
      "type" : "object",
      "properties" : {
        "region" : {
          "type" : "string",
          "title" : "Region of the employee"
        },
        "area" : {
          "type" : "string",
          "title" : "Area of the employee"
        }
      },
      "title" : "General employee information"
    },
    "fmGetClientEmployeeIdsByEmployeeResponse" : {
      "type" : "object",
      "properties" : {
        "client_employee_id" : {
          "type" : "array",
          "title" : "Array of client_employee_ids",
          "items" : {
            "type" : "string"
          }
        }
      },
      "title" : "Response containing list of client_employee_ids"
    },
    "fmGetClientIdsByEmployeeResponse" : {
      "type" : "object",
      "properties" : {
        "client_ids" : {
          "type" : "array",
          "title" : "Array of client_employee_ids",
          "items" : {
            "type" : "string"
          }
        }
      },
      "title" : "Response containing list of client_ids"
    },
    "fmGetContractedHoursResponse" : {
      "type" : "object",
      "properties" : {
        "client_employee_id" : {
          "type" : "string",
          "title" : "unique id of client employee relation"
        },
        "wd_rate" : {
          "type" : "number",
          "format" : "float",
          "title" : "// shift of the employee for the client\nstring shift = 2;\n// shift time of the employee for the client\nstring shift_time = 3;\n// break time\nstring break_time = 4;\n// is break paid\nbool is_paid_break = 5;\nweek days rate"
        },
        "we_rate" : {
          "type" : "number",
          "format" : "float",
          "title" : "weekend days rate"
        },
        "currency" : {
          "type" : "string",
          "title" : "rate currency"
        },
        "shift_contracted_day_hours" : {
          "type" : "array",
          "title" : "contracted hours for the day of the week",
          "items" : {
            "$ref" : "#/definitions/fmShiftContractedDayHours"
          }
        },
        "start_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "contract start date"
        },
        "end_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "contract end date"
        }
      }
    },
    "fmGetEmployeeTrainingResponse" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GetEmployeeTrainingResponseEmployeeTrainingResponse"
          }
        }
      },
      "title" : "Response for get employee trainings"
    },
    "fmGetTargetTasksResponse" : {
      "type" : "object",
      "properties" : {
        "client_employee_id" : {
          "type" : "string",
          "title" : "unique identifier for the client employee relation"
        },
        "start_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "start date for target tasks"
        },
        "end_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "end date for target tasks"
        },
        "weekly_target_tasks" : {
          "type" : "object",
          "title" : "The target tasks for the 7 days",
          "additionalProperties" : {
            "type" : "string",
            "format" : "int64"
          }
        }
      },
      "title" : "Response for getting target task of an employee for a client"
    },
    "fmGetUserListResponse" : {
      "type" : "object",
      "properties" : {
        "users" : {
          "type" : "array",
          "title" : "list of users with their roles and scopes",
          "items" : {
            "$ref" : "#/definitions/fmUserData"
          }
        }
      }
    },
    "fmHolidayResponse" : {
      "type" : "object",
      "properties" : {
        "employee_id" : {
          "type" : "string",
          "title" : "Employee id of employee who has requested a leave/holiday"
        },
        "leave_from_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "Leave from date"
        },
        "leave_to_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "Leave upto date"
        },
        "covered_by_employee_id" : {
          "type" : "string",
          "title" : "The employee who will be covering the absentee employee"
        },
        "client_id" : {
          "type" : "string",
          "title" : "Client at which the employee is taking a lave"
        },
        "status" : {
          "type" : "string",
          "title" : "Status of the holiday request"
        },
        "created_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "The timestamp at which holiday record was created"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "Organization id of the employee"
        },
        "holiday_id" : {
          "type" : "string",
          "title" : "Holiday Id"
        }
      },
      "title" : "Single Holiday Payload"
    },
    "fmHourlyRateInfo" : {
      "type" : "object",
      "properties" : {
        "weekdays_rate" : {
          "type" : "string",
          "title" : "weekdays_rate details"
        },
        "weekend_rate" : {
          "type" : "string",
          "title" : "weekend_rate details"
        },
        "overtime_rate" : {
          "type" : "string",
          "title" : "overtime_rate details"
        }
      },
      "title" : "Hourly rate of Employee information"
    },
    "fmInvoice" : {
      "type" : "object",
      "properties" : {
        "invoice_type" : {
          "type" : "string"
        },
        "monthly" : {
          "type" : "string"
        },
        "yearly" : {
          "type" : "string"
        }
      }
    },
    "fmIssueResponse" : {
      "type" : "object",
      "properties" : {
        "raised_by" : {
          "type" : "string",
          "title" : "id of the user raising the issue"
        },
        "assigned_to" : {
          "type" : "string",
          "title" : "id of the user responsible for solving the issue"
        },
        "details" : {
          "type" : "string",
          "title" : "details of the isssue"
        },
        "deadline" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "deadline of solving the issue"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "unique id of the organization"
        },
        "department_id" : {
          "type" : "string",
          "title" : "unique id of the department"
        },
        "status" : {
          "type" : "string",
          "title" : "status of the issue"
        },
        "resolved_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "resolved date"
        },
        "created_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "date of issue creation"
        },
        "updated_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "date of issue updated"
        },
        "issue_id" : {
          "type" : "string",
          "title" : "unique id of the issue"
        }
      }
    },
    "fmLabourBudget" : {
      "type" : "object",
      "properties" : {
        "daily" : {
          "type" : "string"
        },
        "weekly" : {
          "type" : "string"
        },
        "monthly" : {
          "type" : "string"
        },
        "yearly" : {
          "type" : "string"
        }
      }
    },
    "fmListCheckResponse" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "title" : "list of checks",
          "items" : {
            "$ref" : "#/definitions/ListCheckResponseCheckResponse"
          }
        }
      },
      "title" : "Response for list of check request"
    },
    "fmListClientEmployeeResponse" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ListClientEmployeeResponseClientEmployeeResponse"
          }
        }
      }
    },
    "fmListClientMobilizationResponse" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ListClientMobilizationResponseClientMobilizationResponse"
          }
        },
        "metadata" : {
          "title" : "metadata about response",
          "$ref" : "#/definitions/fmListResponseMetadata"
        }
      },
      "title" : "Response for list of client mobilization"
    },
    "fmListClientRequestSearchParam" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "title" : "name of client"
        },
        "client_code" : {
          "type" : "string",
          "format" : "int64",
          "title" : "unique client code"
        },
        "area" : {
          "type" : "string",
          "title" : "area of client"
        },
        "region" : {
          "type" : "string",
          "title" : "region of client"
        }
      }
    },
    "fmListClientResponse" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "title" : "list of clients",
          "items" : {
            "$ref" : "#/definitions/ListClientResponseClientResponse"
          }
        },
        "metadata" : {
          "title" : "metadata about response",
          "$ref" : "#/definitions/fmListResponseMetadata"
        }
      }
    },
    "fmListCorrectionResponse" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ListCorrectionResponseCorrectionResponse"
          }
        }
      }
    },
    "fmListCoverResponse" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "title" : "list of Covers",
          "items" : {
            "$ref" : "#/definitions/fmCoverResponse"
          }
        }
      },
      "title" : "Response for Cover list"
    },
    "fmListDepartmentResponse" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ListDepartmentResponseDepartmentResponse"
          }
        }
      }
    },
    "fmListDesignationResponse" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ListDesignationResponseDesignationResponse"
          }
        }
      }
    },
    "fmListEmployeeLeaverResponse" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "title" : "list of leaver employees",
          "items" : {
            "$ref" : "#/definitions/fmEmployeeLeaverResponse"
          }
        }
      },
      "title" : "Response for listing leavers"
    },
    "fmListEmployeeRequestSearchParam" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "title" : "name of client"
        },
        "employee_code" : {
          "type" : "string",
          "format" : "int64",
          "title" : "unique client code"
        },
        "area" : {
          "type" : "string",
          "title" : "area of client"
        },
        "region" : {
          "type" : "string",
          "title" : "region of client"
        }
      }
    },
    "fmListEmployeeResponse" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "title" : "list of employees",
          "items" : {
            "$ref" : "#/definitions/ListEmployeeResponseEmployeeResponse"
          }
        }
      },
      "title" : "response for fetching list of employees"
    },
    "fmListEmployeeSickResponse" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "title" : "list of employee sick",
          "items" : {
            "$ref" : "#/definitions/fmEmployeeSickResponse"
          }
        }
      },
      "title" : "Response for creating sick of employee"
    },
    "fmListFeedbackResponse" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/fmFeedbackResponse"
          }
        }
      }
    },
    "fmListHolidayResponse" : {
      "type" : "object",
      "properties" : {
        "holidays" : {
          "type" : "array",
          "title" : "list of holidays",
          "items" : {
            "$ref" : "#/definitions/fmHolidayResponse"
          }
        }
      },
      "title" : "Response for holiday list"
    },
    "fmListInventoryCategoryResponse" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "title" : "Output list for inventory categories",
          "items" : {
            "$ref" : "#/definitions/ListInventoryCategoryResponseInventoryCategory"
          }
        },
        "metadata" : {
          "title" : "metadata about response",
          "$ref" : "#/definitions/fmListResponseMetadata"
        }
      },
      "title" : "Response for listing inventory categories"
    },
    "fmListInventoryItemResponse" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "title" : "Output list",
          "items" : {
            "$ref" : "#/definitions/ListInventoryItemResponseInventoryItem"
          }
        },
        "metadata" : {
          "title" : "metadata about response",
          "$ref" : "#/definitions/fmListResponseMetadata"
        }
      },
      "title" : "Response of item list"
    },
    "fmListIssuesResponse" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "title" : "list of issues",
          "items" : {
            "$ref" : "#/definitions/fmIssueResponse"
          }
        },
        "metadata" : {
          "title" : "metadata about response",
          "$ref" : "#/definitions/fmListResponseMetadata"
        }
      },
      "title" : "List issues response"
    },
    "fmListJobTypeResponse" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ListJobTypeResponseJobTypeResponse"
          }
        }
      }
    },
    "fmListMeetingResponse" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "title" : "list of meetings",
          "items" : {
            "$ref" : "#/definitions/ListMeetingResponseMeetingResponse"
          }
        },
        "metadata" : {
          "title" : "metadata about response",
          "$ref" : "#/definitions/fmListResponseMetadata"
        }
      }
    },
    "fmListNotesResponse" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "title" : "list of Notes",
          "items" : {
            "$ref" : "#/definitions/fmNoteResponse"
          }
        },
        "metadata" : {
          "title" : "metadata about response",
          "$ref" : "#/definitions/fmListResponseMetadata"
        }
      },
      "title" : "List Notes response"
    },
    "fmListOrganizationResponse" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "title" : "list of organizations",
          "items" : {
            "$ref" : "#/definitions/ListOrganizationResponseOrganizationResponse"
          }
        }
      },
      "title" : "response for fetching list of organization"
    },
    "fmListPeriodicTaskResponse" : {
      "type" : "object",
      "properties" : {
        "tasks" : {
          "type" : "array",
          "title" : "list of periodic tasks  queried by user",
          "items" : {
            "$ref" : "#/definitions/fmTimesheetResponse"
          }
        }
      }
    },
    "fmListRequestFilter" : {
      "type" : "object",
      "properties" : {
        "limit" : {
          "type" : "integer",
          "format" : "int32"
        },
        "page" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "fmListResponseMetadata" : {
      "type" : "object",
      "properties" : {
        "total_rows" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "fmListTaskByClientResponse" : {
      "type" : "object",
      "properties" : {
        "tasks" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ListTaskByClientResponseTaskByClientResponse"
          }
        }
      }
    },
    "fmListTaskByEmployeeResponse" : {
      "type" : "object",
      "properties" : {
        "tasks" : {
          "type" : "array",
          "title" : "list of tasks by employee_id queried by user",
          "items" : {
            "$ref" : "#/definitions/fmTaskByEmployeeResponse"
          }
        }
      }
    },
    "fmListTaskByMobileEmployeesResponse" : {
      "type" : "object",
      "properties" : {
        "tasks" : {
          "type" : "array",
          "title" : "list of mobile tasks by employee_id queried by user",
          "items" : {
            "$ref" : "#/definitions/fmTaskByEmployeeResponse"
          }
        }
      }
    },
    "fmListTaskByVariationClientsResponse" : {
      "type" : "object",
      "properties" : {
        "tasks" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/fmTaskByEmployeeResponse"
          }
        }
      }
    },
    "fmListTaskResponse" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "title" : "list of tasks",
          "items" : {
            "$ref" : "#/definitions/ListTaskResponseTaskResponse"
          }
        }
      },
      "title" : "Response for list of task request"
    },
    "fmListTransferResponse" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/fmTransferResponse"
          }
        }
      }
    },
    "fmLoginRequest" : {
      "type" : "object",
      "properties" : {
        "username" : {
          "type" : "string",
          "title" : "username of user"
        },
        "password" : {
          "type" : "string",
          "title" : "password of user"
        }
      },
      "title" : "Request for login"
    },
    "fmLoginResponse" : {
      "type" : "object",
      "properties" : {
        "access_token" : {
          "type" : "string",
          "title" : "access token"
        },
        "refresh_token" : {
          "type" : "string",
          "title" : "refresh token"
        }
      },
      "title" : "Response for login"
    },
    "fmLogoutRequest" : {
      "type" : "object",
      "properties" : {
        "refresh_token" : {
          "type" : "string",
          "title" : "authentication token for logout requests"
        }
      },
      "title" : "Request for logout"
    },
    "fmLogoutResponse" : {
      "type" : "object",
      "properties" : {
        "message" : {
          "type" : "string",
          "title" : "action result"
        }
      },
      "title" : "Response for logout"
    },
    "fmMobilizationPrincipal" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "title" : "type of user"
        },
        "id" : {
          "type" : "string",
          "title" : "unique id of the user"
        },
        "name" : {
          "type" : "string",
          "title" : "name of the user"
        }
      }
    },
    "fmNextOfKeenEmployeeInfo" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "title" : "name of next of keen"
        },
        "relation" : {
          "type" : "string",
          "title" : "relation"
        },
        "address" : {
          "type" : "string",
          "title" : "address"
        },
        "postcode" : {
          "type" : "string",
          "title" : "postcode"
        },
        "contact_number" : {
          "type" : "string",
          "title" : "contact_number"
        },
        "mobile_number" : {
          "type" : "string",
          "title" : "mobile_number"
        },
        "email" : {
          "type" : "string",
          "title" : "email details"
        },
        "date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "date"
        },
        "signature" : {
          "type" : "string",
          "title" : "signature file upload"
        }
      },
      "title" : "Next of Keen employee information"
    },
    "fmNoteResponse" : {
      "type" : "object",
      "properties" : {
        "organization_id" : {
          "type" : "string",
          "title" : "id of the organization this note belongs to"
        },
        "created_by" : {
          "type" : "string",
          "title" : "id of the note creater"
        },
        "for" : {
          "type" : "array",
          "title" : "notes for",
          "items" : {
            "type" : "string"
          }
        },
        "notes" : {
          "type" : "string",
          "title" : "notes detail"
        },
        "note_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "note date"
        },
        "note_id" : {
          "type" : "string",
          "title" : "unique id of note to be updated"
        },
        "created_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "date of note creation"
        },
        "updated_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "date of note updated"
        }
      }
    },
    "fmOfficialEmployeeInformationForListing" : {
      "type" : "object",
      "properties" : {
        "employee_code" : {
          "type" : "string",
          "format" : "int64",
          "title" : "Employee code within the organization"
        },
        "work_permit_expiry_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "Work permit expiry date of the employee"
        },
        "dbs_number" : {
          "type" : "string",
          "title" : "DBS number"
        },
        "dbs_start_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "DBS start date"
        },
        "dbs_review_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "DBS next review date"
        },
        "dbs_expiry_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "DBS expiry date"
        },
        "payment_type" : {
          "type" : "string",
          "title" : "Payment type"
        },
        "department_id" : {
          "type" : "string",
          "title" : "Department ID"
        },
        "cv_attachment" : {
          "type" : "string",
          "title" : "CV path"
        },
        "employee_type" : {
          "type" : "string",
          "title" : "Employee type"
        },
        "is_tupe" : {
          "type" : "boolean",
          "title" : "Is tupe"
        },
        "training_type" : {
          "type" : "string",
          "title" : "type of training to be given to employee"
        },
        "comment" : {
          "type" : "string",
          "title" : "comments if any"
        },
        "is_valid_licence" : {
          "type" : "boolean",
          "title" : "is_valid_licence yes/no"
        },
        "hourly_rate" : {
          "$ref" : "#/definitions/fmHourlyRateInfo"
        },
        "interviewer" : {
          "type" : "string",
          "title" : "interviewer is also from among the active employee  list"
        }
      },
      "title" : "Official employee information used by list, detail endpoint\nan extra employee_code field is added here from\nOfficialEmployeeInformationForUpsert"
    },
    "fmOfficialEmployeeInformationForUpsert" : {
      "type" : "object",
      "properties" : {
        "work_permit_expiry_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "Work permit expiry date of the employee"
        },
        "dbs_number" : {
          "type" : "string",
          "title" : "DBS number"
        },
        "dbs_start_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "DBS start date"
        },
        "dbs_review_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "DBS next review date"
        },
        "dbs_expiry_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "DBS expiry date"
        },
        "is_tupe" : {
          "type" : "boolean",
          "title" : "Is tupe"
        },
        "payment_type" : {
          "type" : "string",
          "title" : "Payment type"
        },
        "department_id" : {
          "type" : "string",
          "title" : "Department ID"
        },
        "cv_attachment" : {
          "type" : "string",
          "title" : "CV path"
        },
        "employee_type" : {
          "type" : "string",
          "title" : "type of contract the employee have with the org: dropdown value -\npermanent, temporary and zero hour"
        },
        "interviewer" : {
          "type" : "string",
          "title" : "interviewer is also from among the active employee  list"
        },
        "training_type" : {
          "type" : "string",
          "title" : "type of training to be given to employee"
        },
        "comment" : {
          "type" : "string",
          "title" : "comments if any"
        },
        "is_valid_licence" : {
          "type" : "boolean",
          "title" : "is_valid_licence yes/no"
        },
        "hourly_rate" : {
          "$ref" : "#/definitions/fmHourlyRateInfo"
        }
      },
      "title" : "Official employee information used by create, update endpoints"
    },
    "fmPeriodicBudget" : {
      "type" : "object",
      "properties" : {
        "frequency" : {
          "type" : "string"
        },
        "totalBudget" : {
          "type" : "number",
          "format" : "float"
        },
        "totalHours" : {
          "type" : "number",
          "format" : "float"
        },
        "budgets" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PeriodicBudgetPBudget"
          }
        }
      }
    },
    "fmReferenceEmployeeInfo" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "title" : "name of reference person"
        },
        "relation" : {
          "type" : "string",
          "title" : "relation to reference person"
        },
        "address" : {
          "type" : "string",
          "title" : "address of reference person"
        },
        "postcode" : {
          "type" : "string",
          "title" : "postcode of reference person"
        },
        "contact_number" : {
          "type" : "string",
          "title" : "contact number of reference person"
        },
        "email" : {
          "type" : "string",
          "title" : "email of reference person"
        }
      },
      "title" : "Reference employee information"
    },
    "fmRefreshRequest" : {
      "type" : "object",
      "properties" : {
        "refresh_token" : {
          "type" : "string",
          "title" : "authetication token for refresh requests"
        }
      },
      "title" : "Request for refresh"
    },
    "fmRegion" : {
      "type" : "object",
      "properties" : {
        "region" : {
          "type" : "string"
        },
        "region_manager" : {
          "type" : "string",
          "title" : "Region manager employee_id"
        }
      }
    },
    "fmRoleResponse" : {
      "type" : "object",
      "properties" : {
        "roles" : {
          "type" : "array",
          "title" : "available roles",
          "items" : {
            "$ref" : "#/definitions/fmUserRole"
          }
        }
      }
    },
    "fmScopeResponse" : {
      "type" : "object",
      "properties" : {
        "scope_groups" : {
          "type" : "array",
          "title" : "available scopes",
          "items" : {
            "$ref" : "#/definitions/fmUserScopeGroup"
          }
        }
      }
    },
    "fmShiftContractedDayHours" : {
      "type" : "object",
      "properties" : {
        "shift" : {
          "type" : "string",
          "title" : "shift of the employee for the client"
        },
        "shift_start_time" : {
          "type" : "string",
          "title" : "shift start time of the employee for the client"
        },
        "shift_end_time" : {
          "type" : "string",
          "title" : "shift end time of the employee for the client"
        },
        "break_time" : {
          "type" : "string",
          "title" : "break time"
        },
        "is_paid_break" : {
          "type" : "boolean",
          "title" : "is break paid"
        },
        "weeks" : {
          "type" : "integer",
          "format" : "int32",
          "title" : "total weeks for shift"
        },
        "contracted_day_hours" : {
          "type" : "array",
          "title" : "contracted hours for the day of the week",
          "items" : {
            "$ref" : "#/definitions/fmContractedDayHours"
          }
        }
      }
    },
    "fmSickPeriod" : {
      "type" : "object",
      "properties" : {
        "from_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "sick requested from date"
        },
        "to_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "sick requested till date"
        }
      }
    },
    "fmStoreBudget" : {
      "type" : "object",
      "properties" : {
        "monthly" : {
          "type" : "string"
        }
      }
    },
    "fmTaskByEmployeeResponse" : {
      "type" : "object",
      "properties" : {
        "client_id" : {
          "type" : "string",
          "title" : "unique identifier of the client on which employee was involved"
        },
        "task_id" : {
          "type" : "string",
          "title" : "unique identifier of the task completed by employee on the client in\nparticular date"
        },
        "check_in_time" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "check in time of the task on the particular date"
        },
        "check_out_time" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "check out time of the task on the particular date"
        },
        "title" : {
          "type" : "string",
          "title" : "task title"
        },
        "employee_id" : {
          "type" : "string",
          "title" : "employee id of the employee for which the task was assigned to"
        }
      }
    },
    "fmTimesheetResponse" : {
      "type" : "object",
      "properties" : {
        "client_id" : {
          "type" : "string",
          "title" : "unique identifier of the client on which employee was involved"
        },
        "employee_id" : {
          "type" : "string",
          "title" : "unique identifier of the employee who was involved with the task"
        },
        "task_id" : {
          "type" : "string",
          "title" : "unique identifier of the task completed by employee on the client in\nparticular date"
        },
        "type" : {
          "type" : "string",
          "title" : "the type of periodic tasks. eg: one-off, accomodation, regular, window"
        },
        "check_in_time" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "check in time of the task on the particular date"
        },
        "check_out_time" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "check out time of the task on the particular date"
        }
      }
    },
    "fmTrainingEmployeeInfo" : {
      "type" : "object",
      "properties" : {
        "skill" : {
          "type" : "string",
          "title" : "skill title"
        },
        "details" : {
          "type" : "string",
          "title" : "details of the skills"
        }
      },
      "title" : "Training employee information"
    },
    "fmTransferResponse" : {
      "type" : "object",
      "properties" : {
        "employee_id" : {
          "type" : "string",
          "title" : "unique id of employee to transfer"
        },
        "department_id" : {
          "type" : "string",
          "title" : "new department id"
        },
        "from_client_id" : {
          "type" : "string",
          "title" : "unique id of client from which employee is transfered"
        },
        "to_client_id" : {
          "type" : "string",
          "title" : "unique id of client to which employee is transfered"
        },
        "transfer_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "effective date of transfer"
        },
        "transfer_reason" : {
          "type" : "string",
          "title" : "reason of employee transfer"
        },
        "sector" : {
          "type" : "string",
          "title" : "new sector"
        },
        "transfer_id" : {
          "type" : "string",
          "title" : "unique id of employee transfer"
        },
        "created_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "transfer data creation time"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "organization id"
        }
      }
    },
    "fmUpdateClientMobilizationRequest" : {
      "type" : "object",
      "properties" : {
        "client_id" : {
          "type" : "string",
          "title" : "client id for the mobilization"
        },
        "category" : {
          "type" : "string",
          "title" : "category of mobilization"
        },
        "subject" : {
          "type" : "string",
          "title" : "subject of mobilization"
        },
        "message" : {
          "type" : "string",
          "title" : "message for the mobilization"
        },
        "by" : {
          "title" : "mobilization by",
          "$ref" : "#/definitions/fmMobilizationPrincipal"
        },
        "to" : {
          "title" : "mobilization to",
          "$ref" : "#/definitions/fmMobilizationPrincipal"
        },
        "date_of_mobilization" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "mobilization date"
        },
        "client_mobilization_id" : {
          "type" : "string",
          "title" : "unique id of the client mobilization"
        },
        "created_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "date of mobilization creation"
        }
      },
      "title" : "Request to update client mobilization"
    },
    "fmUpdateClientMobilizationResponse" : {
      "type" : "object",
      "properties" : {
        "client_mobilization_id" : {
          "type" : "string",
          "title" : "unique id of the updated client mobilization"
        }
      },
      "title" : "Response for update client mobilization"
    },
    "fmUpdateClientRequest" : {
      "type" : "object",
      "properties" : {
        "client_id" : {
          "type" : "string",
          "title" : "client Id of the client to update"
        },
        "name" : {
          "type" : "string",
          "title" : "full name of the client"
        },
        "contact_detail" : {
          "title" : "contact details of the client",
          "$ref" : "#/definitions/fmContactDetail"
        },
        "client_detail" : {
          "title" : "information details of the client",
          "$ref" : "#/definitions/fmClientDetail"
        },
        "contact_people" : {
          "type" : "array",
          "title" : "Contact Person details of the client. Backend saves to\nClientContactPersonService",
          "items" : {
            "$ref" : "#/definitions/fmContactPerson"
          }
        },
        "bank_account_details" : {
          "title" : "Bank account details of the client",
          "$ref" : "#/definitions/fmBankAccountDetails"
        },
        "confidential_contact_people" : {
          "type" : "array",
          "title" : "Confidential Contact Person detail of the client",
          "items" : {
            "$ref" : "#/definitions/fmContactPerson"
          }
        },
        "client_code" : {
          "type" : "string",
          "format" : "int64",
          "title" : "unique code of client within the organization"
        }
      },
      "title" : "request to update client by client id"
    },
    "fmUpdateClientResponse" : {
      "type" : "object",
      "properties" : {
        "client_id" : {
          "type" : "string",
          "title" : "client Id of the updated client"
        }
      },
      "title" : "response for UpdateClientRequest"
    },
    "fmUpdateEmployeeRequest" : {
      "type" : "object",
      "properties" : {
        "employee_id" : {
          "type" : "string",
          "title" : "employee Id of the employee to update"
        },
        "first_name" : {
          "type" : "string",
          "title" : "first name of the employee"
        },
        "middle_name" : {
          "type" : "string",
          "title" : "middle name of the employee"
        },
        "last_name" : {
          "type" : "string",
          "title" : "last name of the employee"
        },
        "employee_code" : {
          "type" : "string",
          "format" : "int64",
          "title" : "unique employee code for organization"
        },
        "contact_detail" : {
          "title" : "contact details of the employee",
          "$ref" : "#/definitions/fmContactDetail"
        },
        "employee_info" : {
          "title" : "Employee information",
          "$ref" : "#/definitions/fmEmployeeInformationForUpsert"
        },
        "confidential_employee_info" : {
          "title" : "Confidential Information about the employee",
          "$ref" : "#/definitions/fmConfidentialEmployeeInfo"
        },
        "training_info" : {
          "type" : "array",
          "title" : "trainig Information filled by the organization",
          "items" : {
            "$ref" : "#/definitions/fmTrainingEmployeeInfo"
          }
        },
        "history_info" : {
          "type" : "array",
          "title" : "employment history Information filled by the organization",
          "items" : {
            "$ref" : "#/definitions/fmEmploymentHistoryInfo"
          }
        },
        "reference_employee_info" : {
          "type" : "array",
          "title" : "Reference Information about the employee",
          "items" : {
            "$ref" : "#/definitions/fmReferenceEmployeeInfo"
          }
        },
        "criminal_conv_emp_info" : {
          "type" : "array",
          "title" : "Criminal Conviction Information about the employee",
          "items" : {
            "$ref" : "#/definitions/fmCriminalConvictionEmployeeInfo"
          }
        },
        "next_of_keen_employee_info" : {
          "title" : "Next of kee Information about the employee",
          "$ref" : "#/definitions/fmNextOfKeenEmployeeInfo"
        },
        "education_employee_info" : {
          "type" : "array",
          "title" : "education Information about the employee",
          "items" : {
            "$ref" : "#/definitions/fmEducationEmployeeInformation"
          }
        }
      },
      "title" : "request to update employee by employee id"
    },
    "fmUpdateEmployeeResponse" : {
      "type" : "object",
      "properties" : {
        "employee_id" : {
          "type" : "string",
          "title" : "employee Id of the updated employee"
        }
      },
      "title" : "response for UpdateEmployeeRequest"
    },
    "fmUpdateEmployeeScopeRequest" : {
      "type" : "object",
      "properties" : {
        "employee_id" : {
          "type" : "string",
          "title" : "id the employee"
        },
        "user_id" : {
          "type" : "string",
          "title" : "user_id"
        },
        "roles" : {
          "type" : "array",
          "title" : "roles for this association",
          "items" : {
            "type" : "string"
          }
        },
        "scopes" : {
          "type" : "array",
          "title" : "scopes for this association",
          "items" : {
            "type" : "string"
          }
        },
        "organization_id" : {
          "type" : "string",
          "title" : "id of organization"
        }
      }
    },
    "fmUpdateEmployeeSickRequest" : {
      "type" : "object",
      "properties" : {
        "employee_sick_id" : {
          "type" : "string",
          "title" : "unique id of employee sick"
        },
        "status" : {
          "type" : "string",
          "title" : "status of request"
        },
        "sick_period" : {
          "title" : "period of requested sick",
          "$ref" : "#/definitions/fmSickPeriod"
        },
        "covered_by_employee_id" : {
          "type" : "string",
          "title" : "covered by employee id"
        },
        "payment" : {
          "type" : "string",
          "title" : "is sick leave paid or unpaid"
        },
        "comment" : {
          "type" : "string",
          "title" : "comment reason for leave"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "unique Id of organization for which employee is working for"
        },
        "sick_entitlement" : {
          "type" : "string",
          "title" : "total number of sick days in a year"
        },
        "remaining_sick_entitlement" : {
          "type" : "string",
          "title" : "remaining sick entitlement"
        }
      },
      "title" : "Request for updating sick of employee"
    },
    "fmUpdateEmployeeSickResponse" : {
      "type" : "object",
      "properties" : {
        "employee_sick_id" : {
          "type" : "string",
          "title" : "unique id of employee sick"
        }
      },
      "title" : "Response fro sick update success"
    },
    "fmUpdateEmployeeStatusRequest" : {
      "type" : "object",
      "properties" : {
        "employee_id" : {
          "type" : "string",
          "title" : "unique identifier of the employee to update status of"
        },
        "status" : {
          "type" : "string",
          "title" : "new status"
        }
      },
      "title" : "Request to update employee status"
    },
    "fmUpdateEmployeeStatusResponse" : {
      "type" : "object",
      "properties" : {
        "employee_id" : {
          "type" : "string",
          "title" : "unique identifier of employee"
        }
      },
      "title" : "Response when updating an employee status"
    },
    "fmUpdateIssueRequest" : {
      "type" : "object",
      "properties" : {
        "raised_by" : {
          "type" : "string",
          "title" : "id of the user raising the issue"
        },
        "assigned_to" : {
          "type" : "string",
          "title" : "id of the user responsible for solving the issue"
        },
        "details" : {
          "type" : "string",
          "title" : "details of the isssue"
        },
        "deadline" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "deadline of solving the issue"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "unique id of the organization"
        },
        "department_id" : {
          "type" : "string",
          "title" : "unique id of the department"
        },
        "status" : {
          "type" : "string",
          "title" : "status of the issue"
        },
        "resolved_at" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "resolved date"
        },
        "issue_id" : {
          "type" : "string",
          "title" : "unique id of the issue"
        }
      },
      "title" : "Update issue request"
    },
    "fmUpdateIssueResponse" : {
      "type" : "object",
      "properties" : {
        "issue_id" : {
          "type" : "string",
          "title" : "unique id of the issue"
        }
      },
      "title" : "Update issue response"
    },
    "fmUpdateMeetingResponse" : {
      "type" : "object",
      "properties" : {
        "meeting_id" : {
          "type" : "string",
          "title" : "meeting Id of the updated meeting"
        }
      },
      "title" : "response for UpdateMeetingRequest"
    },
    "fmUpdateNoteRequest" : {
      "type" : "object",
      "properties" : {
        "organization_id" : {
          "type" : "string",
          "title" : "id of the organization this note belongs to"
        },
        "created_by" : {
          "type" : "string",
          "title" : "id of the note creater"
        },
        "for" : {
          "type" : "array",
          "title" : "notes for",
          "items" : {
            "type" : "string"
          }
        },
        "notes" : {
          "type" : "string",
          "title" : "notes detail"
        },
        "note_date" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "note date"
        },
        "note_id" : {
          "type" : "string",
          "title" : "unique id of note to be updated"
        }
      },
      "title" : "Update note request"
    },
    "fmUpdateNoteResponse" : {
      "type" : "object",
      "properties" : {
        "note_id" : {
          "type" : "string",
          "title" : "unique id of the updated note"
        }
      },
      "title" : "Update note response"
    },
    "fmUpdateTaskByClientRequest" : {
      "type" : "object",
      "properties" : {
        "client_id" : {
          "type" : "string",
          "title" : "fetch timesheet for this client_id"
        },
        "tasks" : {
          "type" : "array",
          "title" : "task list",
          "items" : {
            "$ref" : "#/definitions/UpdateTaskByClientRequestUpdateTaskByClient"
          }
        }
      },
      "title" : "Request for update client timesheet"
    },
    "fmUpdateTaskByClientResponse" : {
      "type" : "object",
      "properties" : {
        "client_id" : {
          "type" : "string",
          "title" : "unique id of the client"
        }
      }
    },
    "fmUpdateTaskByEmployeeRequest" : {
      "type" : "object",
      "properties" : {
        "employee_id" : {
          "type" : "string",
          "title" : "fetch timesheet for this employee_id"
        },
        "tasks" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UpdateTaskByEmployeeRequestUpdateTaskByEmployee"
          }
        }
      },
      "title" : "Request for update employee timesheet"
    },
    "fmUpdateTaskByEmployeeResponse" : {
      "type" : "object",
      "properties" : {
        "employee_id" : {
          "type" : "string",
          "title" : "unique id of the employee"
        }
      }
    },
    "fmUpdateTaskRequest" : {
      "type" : "object",
      "properties" : {
        "task_id" : {
          "type" : "string",
          "title" : "unique id of the task"
        },
        "title" : {
          "type" : "string",
          "title" : "title (name) of the task"
        },
        "description" : {
          "type" : "string",
          "title" : "description of the task"
        },
        "client_id" : {
          "type" : "string",
          "title" : "client the task is associated with"
        },
        "employee_id" : {
          "type" : "string",
          "title" : "employee the task is assigned to"
        },
        "start_time" : {
          "type" : "string",
          "format" : "date-time",
          "title" : "task must start by at least this time. Start time is combination of\nappointment date and time"
        },
        "estimate_time" : {
          "type" : "string",
          "title" : "the estimated time period to complete the task"
        },
        "organization_id" : {
          "type" : "string",
          "title" : "the organization of the employee"
        },
        "is_variation" : {
          "type" : "boolean",
          "title" : "flag to confirm if the task is variation or not"
        }
      },
      "title" : "Request to update task"
    },
    "fmUpdateTaskResponse" : {
      "type" : "object",
      "properties" : {
        "task_id" : {
          "type" : "string",
          "title" : "unique id of the task"
        }
      },
      "title" : "Response from update task"
    },
    "fmUpsertRoleRequest" : {
      "type" : "object",
      "properties" : {
        "role" : {
          "type" : "string",
          "title" : "role to update - this must be unique"
        },
        "scopes" : {
          "type" : "array",
          "title" : "scopes included in the role",
          "items" : {
            "type" : "string"
          }
        },
        "organization_id" : {
          "type" : "string",
          "title" : "id of organization"
        }
      },
      "title" : "Request for updating roles"
    },
    "fmUpsertScopeRequest" : {
      "type" : "object",
      "properties" : {
        "organization_id" : {
          "type" : "string",
          "title" : "id of organization"
        },
        "title" : {
          "type" : "string",
          "title" : "title of scope group"
        },
        "scopes" : {
          "type" : "array",
          "title" : "scopes in the group",
          "items" : {
            "$ref" : "#/definitions/fmUserScope"
          }
        }
      }
    },
    "fmUserData" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "title" : "id of user"
        },
        "employee_id" : {
          "type" : "string",
          "title" : "employee_id of user for the requested organization"
        },
        "first_name" : {
          "type" : "string",
          "title" : "first name of user"
        },
        "last_name" : {
          "type" : "string",
          "title" : "last name of user"
        },
        "email" : {
          "type" : "string",
          "title" : "email of user"
        },
        "roles" : {
          "type" : "array",
          "title" : "roles of user",
          "items" : {
            "type" : "string"
          }
        },
        "scopes" : {
          "type" : "array",
          "title" : "scopes of user",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "fmUserRole" : {
      "type" : "object",
      "properties" : {
        "role" : {
          "type" : "string",
          "title" : "name of role"
        },
        "scopes" : {
          "type" : "array",
          "title" : "scopes for the given role",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "fmUserScope" : {
      "type" : "object",
      "properties" : {
        "alias" : {
          "type" : "string",
          "title" : "alias of scope (readable for user)"
        },
        "scope" : {
          "type" : "string",
          "title" : "name of scope (defined by dev)"
        },
        "description" : {
          "type" : "string",
          "title" : "description of scope"
        }
      }
    },
    "fmUserScopeGroup" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "title" : "title of group"
        },
        "scopes" : {
          "type" : "array",
          "title" : "scopes in the group",
          "items" : {
            "$ref" : "#/definitions/fmUserScope"
          }
        }
      }
    },
    "protobufAny" : {
      "type" : "object",
      "properties" : {
        "type_url" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string",
          "format" : "byte",
          "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
        }
      }
    },
    "runtimeError" : {
      "type" : "object",
      "properties" : {
        "error" : {
          "type" : "string"
        },
        "code" : {
          "type" : "integer",
          "format" : "int32"
        },
        "message" : {
          "type" : "string"
        },
        "details" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}